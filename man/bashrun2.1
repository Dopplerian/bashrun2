.TH BASHRUN2 1 "2020-12-15" "Linux" "User manuals"
.SH NAME
\fBbashrun2\fP \- launch applications from interactive bash sessions

.SH SYNOPSIS
\fBbashrun2\fP [\fIoptions\fP] [\fIcommand\fP [\fIargs\fP]] [-- \fItermopts\fP]

.SH DESCRIPTION
\fBbashrun2\fP adds application launching capabilities to interactive
bash sessions, suitable for use in a graphical user environment.

In its default setup, \fBbashrun2\fP provides an application launcher
in the fashion of a simple run dialog by starting an interactive bash
session in a small \fB__TERMINAL_NAME__\fP(1) terminal window
(the builtin \fIrun-dialog\fP mode).

The builtin \fIterminal\fP mode starts an interactive bash session in
a regular \fB__TERMINAL_NAME__\fP(1) terminal window and transparently
adds bashrun's application launching capabilities, allowing the user
to seamlessly launch graphical and terminal applications from the
command line.

An existing bashrun session may also be used remotely from any
interactive bash session by sourcing a lightweight remote interface.

.SH GETTING STARTED
.SS Using bashrun as a run dialog
Start \fIbashrun2\fP from the command line or with a keybinding in your
window manager or desktop environment. Bashrun will start in its
default mode \fIrun-dialog\fP. It will create an interactive bash
session in a small one-line \fB__TERMINAL_NAME__\fP(1) terminal and
initialize the bashrun engine.

Type a command to launch a graphical application and press
Enter. Bashrun will launch the application and then hide the terminal
window. Now run \fIbashrun2\fP again. The terminal window will be
shown again and you can enter another command. This time, type the
name of a console application. To launch it in a terminal, press
Alt-Enter.

Bring up bashrun again and press F1 to view a complete list of
keybindings and available actions.
.SS Using bashrun in a managed terminal
Start bashrun with \fIbashrun2 --mode terminal\fP. It will launch a
bashrun session in \fIterminal\fP mode, creating a standard sized
terminal window.

Pressing Enter will run commands in the current shell as usual. You
can launch applications in the background now by pressing
Alt-Enter. To launch a console application in a new terminal, press
Alt-t. All other keybindings remain the same as in \fIrun-dialog\fP
mode.

Bind a key in your window manager or desktop environment to run
\fIbashrun2 --mode terminal\fP and use it to bring the window up front
at any time, regardless of whether it is behind other windows or on
another desktop. Run \fIbashrun2 --help\fP or see \fBCOMMAND LINE
INTERFACE\fP for a list of available options and commands.

Use \fIterminal\fP mode if you want to use a dedicated, bashrun
augmented terminal that can be brought up front with a single
keybinding in your window manager or desktop environment.
.SS Using bashrun remotely
In an interactive bash session not started by bashrun, run the command

.nf
  eval "$(bashrun2 --remote-control)"
.fi

A lightweight remote interface to an existing bashrun \fIrun-dialog\fP
session will be installed in the current bash session. Bashrun's
keybindings will be enabled in a similar way as in \fIterminal\fP
mode, i.e. Alt-Enter can be used to launch commands in the background,
and Alt-t can be used to launch commands in a terminal. Non-executable
commands will also be passed on to the remote bashrun session,
providing access to \fBhandler\fP processing. \fBBookmarks\fP and
\fBhandler\fP completion will be available as well.

Use this method if you want transparent remote access to bashrun's
features from any terminal.
.SS Configuring bashrun
To configure bashrun, either edit the the system wide configuration
\fI__SYSCONFDIR__/xdg/bashrun2/bashrun2.rc\fP or create the directory
\fI~/.config/bashrun2/\fP and copy the configuration file into this
directory. The default configuration file contains extensivly
commented examples that should help to get you started. After editing
the configuration file, either restart bashrun or bring it up and
press Alt-r to make changes take effect. See \fBCONFIGURATION\fP for
further details.
.SH COMMAND LINE INTERFACE
The \fBbashrun2\fP executable provides a command line interface to
bashrun sessions and can be used to create, select and control bashrun
sessions running in different \fBmodes\fP. It can manage a single
bashrun session for each \fBmode\fP object defined in the
configuration file.

Modes are selected by the \fB-m\fP or \fB\--mode\fP option. If no
\fBmode\fP is specified, the default \fBmode\fP \fIrun-dialog\fP is
used.

If no session is currently running in the selected \fBmode\fP, then a
session is started in the selected \fBmode\fP, unless the
\fBcommand\fP is either \fIexit\fP or \fIquit\fP. The \fBcommand\fP is
then applied to the newly created session, unless it is either
\fIshow\fP, \fItoggle\fP, \fIsmart\fP, \fIreload\fP, \fIrestart\fP or
\fIdebug\fP. If no \fBcommand\fP is specified, the default
\fBcommand\fP \fIshow\fP is used.
.SS OPTIONS
.IP \fB-m\fP,\ \fB--mode\fP\ \fImode\fP
Select mode to launch or control. In the absence
of this option, the default mode \fIrun-dialog\fP is used.
.IP \fB--remote-control\fP
Print bash code to install a remote control interface to an existing
bashrun session. See \fBREMOTE CONTROL INTERFACE\fP.
.IP \fB-d\fP,\ \fB--debug\fP
Enable debugging on startup
.IP \fB-h\fP,\ \fB--help\fP
Show usage information
.IP \fB-v\fP,\ \fB--version\fP
Show version information
.SS COMMANDS
.IP \fBshow\fP
Show the terminal window. Maps the window, moves it to the current
desktop, moves it above other windows and focuses it. This is the
default command if no command has been specified.
.IP \fBhide\fP
Unmap the terminal window.
.IP \fBtoggle\fP
If the terminal window is not mapped, \fBshow\fP it. If the terminal
window is mapped, \fBhide\fP it.
.IP \fBsmart\fP
If the terminal window is not mapped, not on the current desktop,
obscured by other windows or not focused, then \fBshow\fP it. If none
of these conditions apply, \fBhide\fP the terminal window.
.IP \fBdo\fP\ \fIaction\fP\ [\fIshell-command\fP]
Remotely invoke \fIaction\fP with
\fIshell-command\fP. If the requested action involves
.BR su (1),
the terminal window is shown before invoking the action to allow
the user to enter a password.
.IP \fBsu\fP\ \fIshell-command\fP
Remotely invoke the \fIsu-run\fP action with \fIshell-command\fP. This
is the equivalent to \fBdo\fP \fIsu-run\fP \fIshell-command\fP.
.IP \fBwid\fP
Report the window id of the terminal window.
.IP \fBpid\fP
Report the process id of the bash session.
.IP \fBdebug\fP
Toggle debugging.
.IP \fBreload\fP
Reload configuration files.
.IP \fBrestart\fP
Exit the bashrun session and start a new one.
.IP \fBexit\fP
Exit the bashrun session.
.IP \fBquit\fP
Synonymous with exit.
.SH CONFIGURATION
.SS FILES
Bashrun2 follows the \fBXDG Base Directory Specification\fP to locate
configuration files. If the environment variables
\fIXDG_CONFIG_DIRS\fP and \fI XDG_CONFIG_HOME\fP have not been set,
are empty or include only the default directories defined by the xdg
spec, then the main configuration file will be searched for at the
following locations:
.PP
.RS
.nf\fI
~/.config/bashrun2/bashrun2.rc
/etc/xdg/bashrun2/bashrun2.rc
.fi \fP
.RE
.SS SYNTAX
Configuration files are bash scripts that will be \fIsourced\fP during
the startup of the bashrun session. These scripts are responsible for
defining the configuration functions that contain actual \fBobject
definitions\fP as well as additional helper function definitions for a
specific type of object.
.PP
For each object type, bashrun will look for a function
named
.PP
.RS
\fB+configure-\fP<\fItype\fP>\fBs\fP
.RE
.PP
For example, \fBmode\fP objects are configured by a function named
.PP
.RS
\fI+configure-modes\fP
.RE
.PP
An \fBobject definition\fP consists of an \fBobject initializer\fP,
optionally followed by one or more object \fBproperty definitions\fP
on the same line, followed by one ore more single object \fBproperty
definitions\fP on subsequent lines:
.PP
.RS
\fB+\fP<\fItype\fP> \fB'\fP<\fIname\fP>\fB'\fP [\fB--\fP<\fIproperty-name\fP> \fB'\fP<\fIargs\fP>\fB'\fP...]
.RS
.nf
[\fB--\fP<\fIproperty-name\fP> \fB'\fP<\fIargs\fP>\fB'\fP...]
\[char46]\.\.
.fi
.RE
.RE
.PP
For example, adding the following \fBterminal\fP object definition to
the \fI+configure-terminals\fP function will create a new
\fBterminal\fP object called '\fIsmall\fP' and set its \fBcommand\fP
and \fBgeometry\fP properties:
.PP
.RS
.nf
+terminal 'small'
  --command 'urxvt'
  --geometry '40x12'
.fi
.RE
.PP
Note that if an \fBobject initializer\fP refers to a previously
defined object of the same type using the same \fBname\fP, then
subsequent \fBproperty definitions\fP will apply to the existing
objects instead of creating a new object, i.e. the above example could
also be written as
.PP
.RS
.nf
+terminal 'small' --command 'urxvt'
+terminal 'small' --geometry '40x12'
.fi
.RE
.PP
Multiple arguments to \fBproperty definitions\fP are usually
concatenated into a single string separated by spaces, unless
otherwise indicated.
.SS KEYBINDINGS
.PP
The configuration functions \fI+configure-emacs-mode\fP and
\fI+configure-vi-mode\fP are used to configure keybindings for the
respective editing modes. Within these functions, the following
directives may be used:
.IP \fB+keymap\fP\ <\fIkeymap\fP>
Set the target keymap for subsequent bind directives.
.IP \fB+bind\fP\ <\fIaction\fP>\ <\fIkeyseq\fP>\ [<\fIkeyname\fP>]
Bind an action to a key sequence, optionally supplying a human
readable key name. See \fBreadline\fP(1) on how to specify key
bindings.
.IP \fB+unbind\fP\ <\fIaction\fP>\ [<\fIkeyseq\fP>]
Unbind an action from a key sequence. If the key sequence is omitted,
the action will be unbound from the last key sequence that was
previously bound to. If a key sequence was bound to a readline
function or macro prior to having been bound to a bashrun action, the
original readline binding will be restored. E.g. unbinding the
\fIrun\fP \fBaction\fP from \fI\\C-m\fP (enter) will automatically
rebind \fI\\C-m\fP to readline's \fBaccept-line\fP function.
.IP \fB+rebind\fP\ <\fIaction\fP>
Rebind the action to the key sequence that it was previously bound to,
if any.
.SS PLUGINS
The \fB+plugins\fP directive can be used to include one or more named
\fBplugins\fP into the main configuration file, and must appear at the
top level of the configuration file, i.e. outside of any
\fP+configure\fP function. A \fBplugin\fP may contain additional
object definitions that will be added to the objects defined by the
main configuration file. The \fBplugin\fP files will be searched for
in the following locations:
.PP
.RS
.nf\fI
~/.config/bashrun2/plugins/<plugin-name>.rc
/etc/xdg/bashrun2/plugins/<plugin-name>.rc
.fi \fP
.RE
.PP
For each object type, a plugin may define a \fP+configure\fP function
using the following naming scheme:
.PP
.RS
\fB+configure-\fP<\fIplugin-name\fP>\fB-\fP<\fItype\fP>\fBs\fP
.RE
.PP
Configuration functions provided by plugins will be run before those
defined in the main configuration file.
.SS CACHING
The results of a specific \fI+configure\fP function are cached in
\fIXDG_CACHE_HOME/bashrun2\fP. Objects of the corresponding type and
associated helper functions will be restored from the cache on
subsequent invocations, until the code of the \fI+configure\fP
function changes, upon which the function is again run and the
resulting objects and functions are again cached to replace the
previoulsy cached results.
.PP
.SH OBJECTS
.SS OVERVIEW
Bashrun is composed out of a set of user configurable \fBobjects\fP
that control different aspects of application launching and terminal
window management:

\fBModes\fP control the appearance and behavior of the terminal
hosting the bashrun session, such as the default modes
\fIrun-dialog\fP and \fIterminal\fP mentioned above.

\fBActions\fP can be bound to key sequences and handle user input in
different ways, such as launching a command in a terminal or looking
up words in a dictionary client.

\fBTerminals\fP allow the user to specify different terminal command
lines to be used for launching console applications, and can be
associated with specific commands or command lines.

\fBRules\fP associate \fBactions\fP with specific commands or command
lines, e.g. to automatically launch certain commands with root
privileges. Regular expressions allow fine grained control over
command matching.

\fPHandlers\fP provide a flexible mechanism for rewriting
non-executable commands, using regular expression matching,
substitution and file test operators, thus offering a way to implement
stuff like file associations or web shortcuts. They also provide a
simple interface to programmable completion.

\fBPlugins\fP allow flexible inclusion and distribution of user
created configuration objects.
.SS MODES
\fBMode\fP objects are used to configure different modes of operation
for bashrun. They define the terminal to use for the bashrun session
and control general appearance and behavior.
.IP \fB\-\-terminal\fP\ <\fIname\fP>

default:\ \fI__TERMINAL__\fP

The terminal used for bashrun. Supported terminals include
\fBxterm\fP, \fBurxvt\fP, \fBurxvtc\fP, \fBurxvtcd\fP, \fBmrxvt\fP,
\fBmlterm\fP and \fBaterm\fP. Generic support for other terminals can
be added as well, see \fBGENERIC TERMINAL SUPPORT\fP below.

.IP \fB\-\-geometry\fP\ <\fIgeometry1\fP\ [\fIgeometry2\fP]...>\ (default:\ \fI40x1\ 40x8\fP)

The geometry or geometries to use for the terminal
window. If more than one geometry is used, the cycle-size
action (Ctrl-l) will allow you to cycle through these
geometries.

.IP \fB\-\-font\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The regular terminal font.

.IP \fB\-\-boldfont\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The bold terminal font.

.IP \fB\-\-foreground\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The terminal foreground color.

.IP \fB\-\-background\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The terminal background color.

.IP \fB\-\-options\fP\ <\fIstring\fP>\ (default:\ \fIempty\fP)

Generic terminal options to be included in the terminal command line.

.IP \fB\-\-completion\fP\ <\fItype\fP\ [\fIalternative\fP\ \fIthreshold\fP]>

default:\ \fImenu-complete complete 8\fP

Set the readline completion function to use with tab. \fItype\fP
specifies the completion type to be used by
default. \fIalternative\fP, if given, specifies an alternative
completion type to use when the size of the terminal is greater or
equal to the number of lines given in \fIthreshold\fP. Possible values
for \fItype\fP and \fIalternative\fP are the default readline types
\fIcomplete\fP and \fImenu-complete\fP, as well as the special
\fIquiet-complete\fP type. This type will behave like the standard
\fIcomplete\fP, but will not prompt the user in any way, so that
although possible completions will be listed, they will effectively
not be visible in a single-line terminal.

.IP \fB\-\-cmdnfh\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)

Install a \fBcommand_not_found_handle\fP function that will pass the
command to the \fBrun action\fP and thus invoke \fBhandler\fP
processing. The handler function will only be invoked if the command
is entered using readline's \fBaccept-line\fP function.

.IP \fB\-\-unmap\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)

Unmap (hide) the terminal window after every command.

.IP \fB\-\-onmap\fP\ <\fIcommand\fP>\ (default:\ \fIempty\fP)

A command to be run after the terminal window has been mapped.

.IP \fB\-\-onunmap\fP\ <\fIcommand\fP>\ (default:\ \fIempty\fP)

A command to be run after the terminal window has been unmapped.

.IP \fB\-\-netwmstate\fP\ <\fIstring\fP>\ (default:\ \fIempty\fP)

A space separated list of NetWM state properties to apply to the
window when it is shown. Possible values are \fImodal\fP,
\fIsticky\fP, \fImaximized_vert\fP, \fImaximized_horz\fP,
\fIshaded\fP, \fIskip_taskbar\fP, \fIskip_pager\fP, \fIhidden\fP,
\fIfullscreen\fP, \fIabove\fP and \fIbelow\fP. Note that your wm needs
to properly support these properties in order for them to have any
effect. It is usually better to use your wm's native facilities to set
such properties.

.IP \fB\-\-feedback\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)

Show feedback in the form of a progress bar when creating/restoring
the configuration.

.IP \fB\-\-superuser\fP\ <\fIstring\fP>\ (default:\ \fIAdministrator\fP)

Set the name of the superuser to use for \fBsu-*\fP actions when
running under cygwin.

.IP \fB\-\-logfile\fP\ <\fIfilename\fP>\ (default:\ \fI/dev/null\fP)

Redirect \fBstderr\fP from launched commands to \fIfilename\fP. Note
that \fIstderr\fP for commands run with root priviledges is discarded
by default.

.IP \fB+mode-\fP<\fIname\fP>\fB-init\fI\ \fB()\ {\ commands;\ }

A function that will be run when the corresponding mode to is
initialized. This is a good place to refine the default setup or to
set bash settings such as \fBPS1\fP or \fBHISTFILE\fP for a specific
mode.
.SS TERMINALS
\fBterminal\fP objects define different terminal command lines to use
for launching commands in. Commands can be matched and associated with
a specific terminal objects using the \fB--match\fP property.

.IP \fB\-\-command\ \fP<\fIcommand\ template\fP>

default: \fI__EXEC_TERMINAL__\fP

The terminal command. Supported terminals include \fBxterm\fP,
\fBurxvt\fP, \fBmrxvt\fP, \fBmlterm\fP and \fBaterm\fP. Generic
support for other terminals can be added as well, see \fBGENERIC
TERMINAL SUPPORT\fP below.

.IP \fB\-\-geometry\fP\ <\fIgeometry\fP>\ (default:\ \fIempty\fP)

The X geometry of the terminal.

.IP \fB\-\-font\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The regular terminal font.

.IP \fB\-\-boldfont\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The bold terminal font.

.IP \fB\-\-foreground\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The terminal foreground color.

.IP \fB\-\-background\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

The terminal background color.

.IP \fB\-\-classname\fP\ <\fIstring\fP>\ (default:\ \fInone\fP)

Name portion of the WM_CLASS window property.

.IP \fB\-\-title\fP\ <\fIstring\fP>\ (default:\ \fInone\fP)

Title of the terminal window.

If not specified, the command executed in this terminal will be used
as the window title.

.IP \fB\-\-options\fP\ <\fIstring\fP>\ (default:\ \fIempty\fP)

Generic terminal options to be included in the terminal command line.

.IP \fB\-\-match\fP\ <\fIpattern\fP>\ [...]\ (default:\ \fIempty\fP)

Add one or more \fIpattern\fPs to match commands or command lines
with. If an \fBaction\fP requests the command to be run in a terminal,
then if the \fIpattern\fP matches, this terminal is chosen to run the
command in.

If \fIpattern\fP is a single word, it will be matched verbatim against
the first word of the command line. If the pattern is delimited by
slashes (i.e \fB/\fP\fIpattern\fP\fB/\fP), then the pattern is matched
as a regular expression on the complete command line. Note that
slashes inside the regular expression do \fInot\fP have to be escaped
with a backslash in this notation.

.PP
There are two terminal objects defined by default. The terminal named
\fIdefault\fP will be used if no other terminal matches the given
command and an \fBaction\fP has requested the command to be run in a
terminal. The default \fInotify\fP \fBterminal\fP is a small terminal
used by the default \fBactions\fP \fIterm-notify\fP and
\fIsu-term-notify\fP (see \fBDEFAULT ACTIONS\fP below).

Note that any \fIpatterns\fP associated with a \fBterminal\fP object
will be implicitly appended to the \fIterm-run\fP \fBrule\fP (see
\fBRULES\fP below). This means that commands matched by a
\fBterminal\fP will always be run in that \fBterminal\fP, even if this
was not explicitly requested by the current \fPaction\fP.
.SS BOOKMARKS
For each \fBbookmark\fP object, a stub function by the same name is
defined that runs the \fIbrowse\fP action for the \fBbookmark\fP
name. Bookmarks can thus be completed like regular commands. Example:
.PP
.RS
.nf
+bookmark 'www.google.com'
.fi
.RE
.SS RULES
Rule objects associate \fBactions\fP with specific commands or command
lines. The \fBrule\fP name must correspond to the name of an existing
action. The first \fBrule\fP that matches the command will take effect
and invoke the corresponding \fBaction\fP on the command. Rule
processing takes place only if the generic \fIrun\fP \fBaction\fP is
invoked on the command.

.IP \fB\-\-match\fP\ <\fIpattern\fP>\ [...]\ (default:\ \fIempty\fP)

Add one or more \fIpatterns\fP to match commands or command lines
against.

If \fIpattern\fP is a single word, it will be matched verbatim against
the first word of the command line. If the pattern is delimited by
slashes (i.e \fB/\fP\fIpattern\fP\fB/\fP), then the pattern is matched
as a regular expression on the complete command line. Note that
slashes inside the regular expression do \fInot\fP have to be escaped
with a backslash in this notation.
.SS HANDLERS
Handler objects can be used to match, test against and rewrite
non-executable command lines and then either execute the resulting
command or dispatch the resulting string to a specific \fBaction\fP
for further processing. In addition, handlers provide a simple
interface to programmable completion.

If the commandline entered into bashrun is not executable (i.e. it's
not an exported function, an alias or an executable) then an attempt
is made to successively match the command line against each of
\fBhandlers\fP, in the order in which they are defined in the
configuration files.

If the regular expression given with \fB--match\fP matches the
commandline, then an optional file test pattern given with
\fB--test\fP is applied. If no test was specified or if the supplied
test succeeds, then either the value of \fB--command\fP will be used
as the command to execute, with the original command line appended,
or, if the regexp contains subexpressions within parenthesis, an
attempt will be made to substitute the occurence of \fI%\fP<\fI1\fP-\fI9\fP>
in the value of \fB--command\fP with the contents of the corresponding
subexpression match.

The \fB--action\fP property may be used to delegate the resulting
string to a specific \fBaction\fP for further processing. If no
\fBaction\fP was given, the resulting string is assumed to constitute
an executable command, and will be run in the background.

A command word to complete can be supplied via the \fB--complete\fP
property, and a function named
\fB+handler-\fP<\fIname\fP>\fB-complete\fP can be defined to generate
a list of possible completions.

.IP \fB\-\-match\fP\ <\fIregexp\fP>\ (default:\ \fI(.+)\fP)
The regular expression to match against the command line. The results
of any matching parenthized subexpressions within this expression can
be inserted into the \fB--command\fP template (see \fB--command\fP
below).

.IP \fB\-\-test\fP\ <\fIexpression\fP>\ (default:\ \fIempty\fP)

The test \fIexpression\fP is a series of characters corresponding to
the unary file test operators defined in section \fBCONDITIONAL
EXPRESSIONS\fP of the
.BR bash (1)
manual. The individual file tests will each be performed on the
complete command line. If one of the these tests fails, the test as a
whole fails and the handler is skipped. File tests can be negated by
prefixing them with a single \fI!\fP. For example, a handler using the
\fIexpression\fP \fIf!x\fP will only be applied if the command line
contstitutes the filename of a regular, non-executable file.

.IP \fB\-\-command\fP\ <\fIcommand\ template\fP>\ (default:\ \fIempty\fP)

The \fIcommand template\fP is used to rewrite the original command
line to construct an executable command line or a string that can be
passed on to an \fBaction\fP for further processing, denoted by the
\fB--action\fP property.

If the template contains a percent sign (\fI%\fP) followed by a single
digit in the range \fI1-9\fP, then this pattern will be replaced with
the matching contents of the corresponding parenthesized
subexpressions in the regular expression given with \fB--match\fP.

If no such patterns occur in the command template, then the original
command line is appended to the end of the template string, separated
by a space character.

.IP \fB\-\-action\fP\ <\fIname\fP>\ (default:\ \fIempty\fP)

The \fIname\fP of an \fBaction\fP that shall be invoked on the
rewritten command string. If no \fBaction\fP is specified, the
rewritten command string is assumed to constitute an executable
command and is executed in the background.

.IP \fB\-\-complete\fP\ <\fIword\fP>\ (default:\ \fIempty\fP)

A stub function \fBword\fP is created and can thus be completed on the
command line. Standard bash completion is installed for this
\fIword\fP unless a specific completion function is supplied for this
\fBhandler\fP (see below).

.IP \fB\-\-fallback\fP\ <\fIboolean\fP>\ (default:\ \fIfalse\fP)

If set to true, this \fBhandler\fP will always appear at the end of
the handler chain, regardless of where it was defined in the
configuration files. If more than one fallback \fBhandler\fP is
defined, they will end up at the end of the handler chain in the order
in which they are defined in the configuration files.

.IP \fB+handler-\fP<\fIname\fP>\fB-complete\fI\ \fB()\ {\ commands;\ }

An optional function that generates a newline-separated list of
possible completions used for the \fIword\fP given by the
\fB--complete\fP property of the corresponding \fBhandler\fP. If no
such function is defined, standard bash completion will instead be
installed for the \fPword\fP.
.SS ACTIONS
\fBAction\fP objects implement the core functionality of bashrun by
handling user input in arbitrarily complex ways. Actions can be
invoked directly by the user via key bindings or remotely from the
command line. Each action is augmented by an associated helper
function which is responsible for generating an executable command
based on user input. To do so, an action function can interact with
the bashrun engine by using special functions, e.g. to get or set the
resulting command, test it for certain conditions, invoke handler and
rules processing, add a terminal, change the effective user id, or
simply run some shell commands and then terminate processing. See the
description of the \fB+action-\fP<\fIname\fP> function below for
details.

.IP \fB\-\-description\fP\ <\fIstring\fP>\ (default:\ \fIempty\fP)
A short description for this \fBaction\fP. This string will be used to
describe the action to the user when listing key bindings.

.IP \fB\-\-depends\fP\ <\fIlist\fP>\ (default:\ \fIempty\fP)
A space separated list of external programs used by this action. The
user will be prompted with an appropriate error message if one of
these dependencies is not satisfied.

.IP \fB\-\-input\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)
Accept the current line as input for this action. If set to
\fIfalse\fP, the action will be invoked without altering the current
line.

.IP \fB\-\-remote\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)
Include this \fBaction\fP in the remote control interface. (See
\fBREMOTE CONTROL INTERFACE).

.IP \fB+action-\fP<\fIname\fP>\ \fB()\ {\ commands;\ }\fP

The function implementing this \fBaction\fP. The return value of this
function determines how to proceed further. If the function returns
\fI0\fP, then bashrun assumes that the current command set by the
\fBcommand\fP function (see below) is executable and will proceed to
spawn a new instance of bash to execute the command. If the function
returns \fI1\fP, the action terminates immediately, possibly unmapping
the terminal window if requested by the \fB+mode --unmap\fP
property. If the function returns \fI2\fP, then the action terminates
without ever unmapping the terminal window, ignoring the value of
\fB+mode --unmap\fP.
.PP
The following functions are defined during execution of the action
function:
.IP \fBcommand\fP\ [\fIvalue\fP]
Get or set the command. If no \fIvalue\fP is given, print the current
command on stdout. If a \fIvalue\fP is given, set the current commmand
to \fIvalue\fP.
.IP \fBline\fP
Print the complete command line entered by the user to stdout.
.IP \fBword\fP
Print the first word of the command line entered by the user to
stdout. Note that any environment variable assignments at the
beginning of the line will be skipped when determining the command
word.
.IP \fBtitle\fP
Set the title to be used in case this command is run in a
terminal. Note that this command must be called before the terminal
command line is constructed, i.e. before \fBterminal\fP, \fBpager\fP
or \fBhold\fP is called.
.IP \fBquote-command\fP
Quote the command in a way that can be reused as shell input.
.IP \fBaction\fP\ <\fIname\fP>
Run the action function of the \fBaction\fP denoted by \fIname\fP on
the current command.
.IP \fBhandlers\fP
Invoke \fBhandler\fP processing for the command.
.IP \fBrules\fP
Invoke \fBrules\fP processing for the command.
.IP \fBterminal\fP\ [<\fIname\fP>].
Modify the command to be run in the \fBterminal\fP specified by
\fIname\fP. If no explicit \fBterminal\fP \fIname\fP is given, then
the \fPterminal\fP that matches the command will be used. If no
\fBterminal\fP matches the command or no \fBterminal\fP of the given
\fIname\fP exists, the \fIdefault\fP \fBterminal\fP is used.
.IP \fBhold\fP\ [<\fIsec\fP=\fI0\fP>]
Modify the command to add a delay of \fIsec\fP seconds after the
command has been run. If \fIsec\fP is \fI0\fP (the default), wait
until the user presses a key.
.IP \fBpager\fP
Modify the command to page the output in a pager. The value of the
environment variable \fBPAGER\fP (default: less) will be used for
this.
.IP \fPuser\fP\ [\fB--prompt\fP]\ [<\fIusername\fP=\fIroot\fP>]
Modify the command to be run with a different user id by using
\fBsu\fP(1). If the \fB--prompt\fP option is supplied, prompt the user
for the username, otherwise use the supplied \fIusername\fP (default:
\fIroot\fP). The terminal window will be mapped prior to running the
command to allow the user to enter the username and/or password.
.IP \fBmap\fP
Map the terminal window, e.g. to prompt the user.
.IP \fBexecutable?\fP
Test whether the command is executable.
.IP \fBbuiltin?\fP
Test whether the command is a bash builtin command.
.IP \fBbookmark?\fP
Test whether the command is a bashrun \fBbookmark\fP.
.SS BUILTIN ACTIONS
This section describes the default \fBactions\fP defined in bashrun,
along with their default keybindings.

If you wish to change the implementation of a default action, enter
debug mode, type \fB+action\fP <\fIname\fP> \fB--code\fP and press
\fBM-w\fP to retrieve the source code of the \fBaction\fP. You can
this code to your \fB+configure-actions\fP function in your
configuration file and modify it accordingly.

.IP \fBpass\fP\ (\fBM-w\fP)
Run a command directly in the bashrun shell session.
.IP \fBabort\fP\ (\fBC-g\fP)
Clear the command line and hide the terminal window.
.IP \fBbashrun-bindings\fP\ (\fBF1\fP)
Show the current keybindings in a terminal.
.IP \fBbashrun-manual\fP\ (\fBF2\fP)
Show this manual page in a terminal.
.IP \fBdebug\fP\ (\fBF12\fP)
Resize the terminal window to 80x24 and turn on debugging.
.IP \fBreload\fP\ (\fBM-r\fP)
Reload the configuration. All configuration ibjects are reloaded from
the cache unless a configuration functions for a certain type of
object has changed.
.IP \fBquit\fP\ (\fBC-q\fP)
Terminate the bashrun session.
.IP \fBrun\fP\ (\fBC-m\fP,\ \fBC-j\fP,\ \fBEnter\fP)
Run a command as an independent process, detached from the bashrun
shell session. If the command is not executable, try match it against
\fBhandlers\fP. If no handlers match, abort processing, else apply
\fPrules\fP and proceed. This behaviour is common for all \fBrun-*\fP
actions.
.IP \fBterm-run\fP\ (\fBM-C-m\fP,\ \fBM-Enter\fP)
Run the command in a terminal.
.IP \fBterm-hold\fP\ (\fBM-h\fP)
Run the command in a terminal and keep the terminal open until the
user presses any key.
.IP \fBterm-page\fP\ (\fBM-+\fP)
Run the command in a terminal and display the output using the pager program
defined by the environment variable \fBPAGER\fP. If this variable is
unset or empty, use \fBless\fP(1).
.IP \fBterm-notify\fP
Run command in the default \fInotify\fP \fBterminal\fP and hold for
two seconds.
.IP \fBsu-run\fP\ (\fBM-su\fP)
Run a command as root. Will prompt the user for the root password.
.IP \fBsu-term-run\fP\ (\fBM-st\fP)
Run the command as root in a terminal.
.IP \fBsu-term-hold\fP\ (\fBM-sh\fP)
Run the command as root in a terminal and keep the terminal open until the
user presses any key.
.IP \fBsu-term-page\fP\ (\fBM-s+\fP)
Run the command as root in a terminal and display the output using
the pager program defined by the environment variable \fBPAGER\fP. If
this variable is unset or empty, use \fBless\fP(1).
.IP \fBsu-term-notify\fP
Run command as root in the default \fInotify\fP \fBterminal\fP and
keep the terminal open for two seconds.
.IP \fBshow-manual\fP\ (\fBM-?\fP)
Show the manual page for a command.
.IP \fBshow-info\fP\ (\fBM-C-?\fP)
Show the manual page for a command.
.IP \fBshow-help\fP\ (\fBM-C-x?\fP)
Show help for a bash builtin.
.IP \fBbrowse\fP\ (\fBM-C-b\fP)
Launch urls in \fB$BROWSER\fP.
.IP \fBgoogle-search\fP\ (\fBM-C-g\fP)
Use command line contents as a search term on google.
.IP \fBdict-lookup\fP\ (\fBM-C-d\fP)
Lookup words in a dictionary client. (\fB$DICT\fP)
.IP \fBcopy-to-clipboard\fP\ (\fBM-x\fP)
Copy command output to clipboard using \fIxclip -i\fP.
.IP \fBfilter-clipboard\fP\ (\fBM-a\fP)
Use command as a filter on clipboard. Equivalent to
\fI
.nf
  xclip -o | command | xclip -i
.ni
\fP
.IP \fBcycle-size\fP\ (\fBC-l\fP)
Cycle through the geometries given by \fB +mode --geometry\fP.
.IP \fBresize-up\fP\ (\fBC-↑\fP)
Decrease terminal height by one line.
.IP \fBresize-down\fP\ (\fBC-↓\fP)
Increase terminal height by one line.
.IP \fBresize-left\fP\ (\fBC-←\fP)
Decrease terminal width by one column.
.IP \fBresize-right\fP\ (\fBC-→\fP)
Increase terminal width by one column.
.SH GENERIC TERMINAL SUPPORT
Generic support for terminals can be added by supplying a template
string of the required terminal command line to the \fB+mode --terminal\fP
or \fB+terminal --command\fP properties.

Template strings may contain the following format specifiers which
will be replaced by their corresponding values:
.RS
.IP \fI%*\fP
The command to be run by the terminal, unquoted.
.IP \fI%@\fP
The command to be run by the terminal, quoted to appear as a single
argument. Consequtive \fI@\fP's add another level of quoting,
e.g. \fI%@@\fP quotes two times, \fI%@@@\fP quotes three times, and so
on.
.IP \fI%n\fP
For +mode objects, this is replaced with the string
\fIbashrun2-\fP<\fImode-name\fP>, and needs to be set as the name
portion of the terminals WM_CLASS property. For terminal objects, the
value of the \fB--classname\fP property is used.
.IP \fI%g\fP
The value of the \fB--geometry\fP property.
.IP \fI%f\fP
The value of the \fB--font\fP property.
.IP \fI%b\fP
The value of the \fB--boldfont\fP property.
.IP \fI%F\fP
The value of the \fB--foreground\fP property.
.IP \fI%B\fP
The value of the \fB--background\fP property.
.IP \fI%o\fP
The value of the \fB--options\fP property plus any additional terminal
options given on the command line after \fI--\fP.
.IP \fI%%\fP
is replaced by a literal percent sign (\fI%\fP)
.RE
.PP
Note that any format specifier that appears in the template string
will always be replaced with its corresponding value, even if the the
value is an empty string. So you should make sure that format
specifiers whose value is derived from an option are not empty
(e.g. the corresponding option is set) to avoid constructing an
invalid command line.
.PP
Examples:
.PP
.nf
+mode
  --terminal 'urxvt -n %n -g %g -fn %f -fb %b -fg %F -bg %B %o -e %*'

+terminal
  --command 'urxvt -n %n -g %g -fn %f -fb %b -fg %F -bg %B %o -e bash -c %@'
.ni
.PP
.SH KNOWN\ ISSUES
Older versions of bash may freeze when resizing the terminal window
and will need to be forcefully terminated in this case.
.PP
For XTerm, the \fBallowWindowOps\fP resource needs to be set to
\fBTrue\fP to allow window resizing. This is enabled by default. Note
that setting \fBallowSendEvents\fP to \fBTrue\fP will forcefully
disable \fBallowWindowOps\fP in XTerm.
.PP
In order for meta keybindings (prefixed with \fB\\e\fP or \fB\\M-\fP)
to work with the Alt or Meta key, the terminal needs to be configured
to translate your meta key to an escape. For XTerm, this can be
enabled by setting the \fBmetaSendsEscape\fP resource to
\fBTrue\fP. When using XTerm, bashrun will set this resource to
\fBTrue\fP by default. For URxvt, the \fBmeta8\fP resource needs to be
set to \fBFalse\fP (which is already the default setting in URxvt).
.SH FILES
.IP \fI/etc/xdg/bashrun2/bashrun2.rc\fP
System-wide configuration file
.IP \fI/etc/xdg/bashrun2/plugins/\fP
System-wide plugin directory
.IP \fI$HOME/.config/bashrun2/bashrun2.rc\fP
User configuration file
.IP \fI$HOME/.config/bashrun2/plugins/\fP
User plugin directory
.IP \fI/usr/bin/brwctl\fP
Small utilty program for window management
.SH BUGS AND FEEDBACK
Please file bugs and feature requests on the github issue tracker:

https://github.com/hbekel/bashrun2/issues

Also feel free to mail me directly using the email adress
below. Questions, comments, suggestions, feedback of any kind is
greatly appreciated.
.SH AUTHOR
Henning Liebenau <henning dot liebenau at protonmail dot com>
.SH "SEE ALSO"
.BR bash (1)
.BR readline (3)
.BR __TERMINAL_NAME__ (1)
.BR su (1)
.BR stty (1)
