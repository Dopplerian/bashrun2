.\" Process this file with
.\" groff -man -Tascii bashrun.1
.\"
.TH BASHRUN 1 "2010-06-28" "Linux" "User manuals"
.SH NAME
\fBbashrun\fP \- launch applications from interactive bash sessions
.SH SYNOPSIS
\fBbashrun\fP [\fIoptions\fP] [\fIcommand\fP [\fIargs\fP]] [-- \fItermopts\fP]
.SH DESCRIPTION
.PP
\fBbashrun\fP adds versatile application launching capabilities to
interactive bash sessions, suitable for use in a graphical user
environment.

In its default setup, \fBbashrun\fP provides a simple run dialog by
creating an interactive bash session in a small
\fB__TERMINAL_NAME__\fP(1) terminal window. This mode of operation is
defined by the default \fIlauncher\fP mode.

\fBbashrun\fP may also be used in a regular terminal session, allowing
the user to seamlessly launch both graphical and terminal applications
from the command line. This can be done by either starting bashrun in
\fIterminal\fP mode or by installing a lightweight remote control
interface in a regular bash session (See \fBREMOTE CONTROL
INTERFACE\fP).
.SH OVERVIEW
Bashrun is composed out of a set of user configurable \fBobjects\fP
that control different aspects of application launching and terminal
window management:

\fBModes\fP control the appearance and behavior of the terminal
hosting the bashrun session, such as the default modes \fIlauncher\fP
and \fIterminal\fP mentioned above.

\fBActions\fP can be bound to key sequences and handle user input in
different ways, such as launching a command in a terminal or looking
up words in a dictionary client.

\fBTerminals\fP allow the user to specify different terminal command
lines to be used for launching console applications, and can be
associated with specific commands or command lines.

\fBRules\fP associate \fBactions\fP with specific commands or command
lines, e.g. to automatically launch certain commands in a
\fBterminal\fP. Regular expressions allow fine grained control over
command matching.

\fPHandlers\fP provide a flexible mechanism for rewriting
non-executable commands, using regular expression matching,
substitution and file test operators, thus offering a way to implement
stuff like file associations or web shortcuts. They also provide a
simple interface to programmable completion.

\fBPlugins\fP allow flexible inclusion and distribution of user
created configuration objects.
.SH COMMAND LINE INTERFACE
The \fBbashrun\fP executable provides a command line interface to
bashrun sessions and can be used to create, select and control bashrun
sessions running in different \fBmodes\fP. It can manage a single
bashrun session for each \fBmode\fP object defined in the
configuration file.

Modes are selected by the \fB-m\fP or \fB\--mode\fP option. If no
\fBmode\fP is specified, the default \fBmode\fP \fIlauncher\fP is
used.

If no session is currently running in the selected \fBmode\fP, then a
session is started in the selected \fBmode\fP, unless the
\fBcommand\fP is either \fIexit\fP or \fIquit\fP. The \fBcommand\fP is
then applied to the newly created session, unless it is either
\fIshow\fP, \fItoggle\fP, \fIsmart\fP, \fIreload\fP, \fIrestart\fP or
\fIdebug\fP. If no \fBcommand\fP is specified, the default
\fBcommand\fP \fIshow\fP is used.
.SS OPTIONS
.IP \fB-m\fP,\ \fB--mode\fP\ \fImode\fP
Select mode to launch or control. In the absence
of this option, the default mode \fIlauncher\fP is used.
.IP \fB--remote-control\fP
Print bash code to install a remote control interface to an existing
bashrun session. See \fBREMOTE CONTROL INTERFACE\fP.
.IP \fB-d\fP,\ \fB--debug\fP
Enable debugging on startup
.IP \fB-h\fP,\ \fB--help\fP
Show usage information
.IP \fB-v\fP,\ \fB--version\fP
Show version information
.SS COMMANDS 
.IP \fBshow\fP
Show the terminal window. Maps the window, moves it to the current
desktop, moves it above other windows and focuses it. This is the
default command if no command has been specified.
.IP \fBhide\fP
Unmap the terminal window.
.IP \fBtoggle\fP
If the terminal window is not mapped, \fBshow\fP it. If the terminal window
is mapped, \fBhide\fP it.
.IP \fBsmart\fP
If the terminal window is not mapped, not on the current desktop,
obscured by other windows or not focused, then \fBshow\fP it. If none
of these conditions apply, \fBhide\fP the terminal window.
.IP \fBdo\fP\ \fIaction\fP\ [\fIshell-command\fP]
Remotely invoke \fIaction\fP with
\fIshell-command\fP. If the requested action involves
.BR su (1),
the terminal window is shown before invoking the action to allow
the user to enter a password.
.IP \fBsu\fP\ \fIshell-command\fP
Remotely invoke the \fIsu-run\fP action with \fIshell-command\fP. This is
the equivalent to \fBdo\fP \fIsu-run\fP \fIshell-command\fP.
.IP \fBwid\fP
Report the window id of the terminal window.
.IP \fBpid\fP
Report the process id of the bash session.
.IP \fBdebug\fP
Toggle debugging.
.IP \fBreload\fP
Reload configuration files.
.IP \fBrestart\fP
Exit the bashrun session and start a new one.
.IP \fBexit\fP
Exit the bashrun session.
.IP \fBquit\fP
Synonymous with exit.
.SH CONFIGURATION
.SS FILES
Bashrun follows the \fBXDG Base Directory Specification\fP to locate
configuration files. If the environment variables
\fIXDG_CONFIG_DIRS\fP and \fI XDG_CONFIG_HOME\fP have not been set,
are empty or include only the default directories defined by the xdg
spec, then the main configuration file will be searched for at the
following locations:
.PP
.RS
.nf\fI
~/.config/bashrun/bashrun.rc
/etc/xdg/bashrun/bashrun.rc
.fi \fP
.RE
.PP
A plugin specified for inclusion with the \fB+plugins\fP directive
(see \fBPLUGINS\fP below) will be searched for in the following
locations:
.PP
.RS
.nf\fI
~/.config/bashrun/plugins/<plugin-name>.rc
/etc/xdg/bashrun/plugins/<plugin-name>.rc
.fi \fP
.RE
.SS SYNTAX
Configuration files are bash scripts that will be \fIsourced\fP during
the startup of the bashrun session. These scripts are responsible for
defininf the configuration functions that contain actual \fBobject
definitions\fP as well as additional helper function definitions for a
specific type of object.
.PP
For each object type, bashrun will look for a function
named 
.PP
.RS
\fB+configure-\fP<\fItype\fP>\fBs\fP
.RE
.PP
For example, \fBmode\fP objects are configured by a function named
.PP
.RS
\fI+configure-modes\fP
.RE
.PP
In addtion, the functions \fI+configure-emacs-mode\fP and
\fI+configure-vi-mode\fP are used to configure keybindings for the
respective editing modes. See \fBKEYBINDINGS\fP for details.
.PP
An \fBobject definition\fP consists of an \fBobject initializer\fP,
optionally followed by one or more object \fBproperty definitions\fP on the
same line, followed by one ore more single object \fBproperty definitions\fP
on subsequent lines:
.PP
.RS
\fB+\fP<\fItype\fP> \fB'\fP<\fIname\fP>\fB'\fP [\fB--\fP<\fIproperty-name\fP> \fB'\fP<\fIargs\fP>\fB'\fP...]
.RS
.nf
[\fB--\fP<\fIproperty-name\fP> \fB'\fP<\fIargs\fP>\fB'\fP...]
\[char46]\.\.
.fi
.RE
.RE
.PP
For example, adding the following \fBterminal\fP object definition to
the \fI+configure-terminals\fP function will create a new
\fBterminal\fP object called '\fIsmall\fP' and set its \fBcommand\fP
and \fBgeometry\fP properties:
.PP
.RS
+terminal 'small' 
  --command 'urxvt -g %g -e bash -c %@'
  --geometry '40x12'
.RE
.PP
Note that if an \fBobject initializer\fP refers to a previously defined
object of the same type using the same \fBname\fP, then subsequent
\fBproperty definitions\fP will apply to the existing objects instead of
creating a new object, i.e. the above example could also be written as
.RS
.PP
.nf
+terminal 'small' --command 'urxvt -g %g -e bash -c %@'
+terminal 'small' --geometry '40x12'
.ni
.RE
.PP
Multiple arguments to \fBproperty definitions\fP are usually
concatenated into a single string separated by spaces, unless
otherwise indicated.
.SS CACHING
The results of a specific \fI+configure\fP function are cached in
\fIXDG_CACHE_HOME/bashrun\fP. Objects of the corresponding type and
associated helper functions will be restored from the cache on
subsequent invocations, until the code of the \fI+configure\fP
function changes, upon which the function is again run and the
resulting objects and functions cached to replace the previoulsy
cached results.
.PP
.SH OBJECTS
.SS MODES
\fBmode\fP objects provide a way to run multiple instances of bashrun
with different settings. They define a terminal command line used to
launch a bashrun session and further control the sessions general
appearance and behavior.

.IP \fB\-\-terminal\fP\ <\fIcommand\ template\fP>

default:\ \fI__TERMINAL__\fP

The terminal command template defines the terminal to be used for
bashrun. Within this string, patterns prefixed with \fI%\fP will be
replaced with their corresponding values. 
.RS
.IP \fI%*\fP 
is replaced with the actual command to be run by the terminal. It
should appear as the value for the execute option of your terminal of
choice, e.g use \fI-e %*\fP at the end of the string for most terminals.
.IP \fI%@\fP 
is replaced with the actual command to run, quoted to appear as a
single argument. Consequtive \fI@\fP's add another level of quoting,
e.g. \fI%@@\fP quotes two times, \fI%@@@\fP quotes three times, and so
on.
.IP \fI%n\fP
is replaced by the string \fIbashrun-\fP<\fImode-name\fP> and must
be set as the window class name of your terminal, e.g. use \fI-name
%n\fP for urxvt or xterm.
.IP \fI%g\fP
is replaced with the first word of the string given by the
\fB--geometry\fP property, see below.
.IP \fI%f\fP 
is replaced with the string given by the \fB--font\fP property.
.IP \fI%o\fP
is replaced by any additional terminal options given on the bashrun
command line after \fI--\fP.
.RE

.IP \fB\-\-geometry\fP\ <\fIgeometry1\fP\ [\fIgeometry2\fP]...>\ (default:\ \fI40x1\ 40x8\fP)

The geometry or geometries to use for the terminal
window. If more than one geometry is used, the cycle-size
action (Ctrl-l) will allow you to cycle through these
geometries.
.IP \fB\-\-font\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

Set the value of the \fI%f\fP pattern for the terminal command template.

.IP \fB\-\-completion\fP\ <\fItype\fP\ [\fIalternative\fP\ \fIthreshold\fP]> 

default:\ \fImenu-complete complete 8\fP

Set the readline completion function to use with tab. \fItype\fP
specifies the completion type to be used by
default. \fIalternative\fP, if given, specifies an alternative
completion type to use when the size of the terminal is greater or
equal to the number of lines given in \fIthreshold\fP. Possible values
for \fItype\fP and \fIalternative\fP are the default readline types
\fIcomplete\fP and \fImenu-complete\fP, as well as the special
\fIquiet-complete\fP type. This type will behave like the standard
\fIcomplete\fP, but will not prompt the user in any way, so that
although possible completions will be listed, they will effectively
not be visible in a single-line terminal.

.IP \fB\-\-cmdnfh\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)

Install a \fBcommand_not_found_handle\fP function that will pass the
command to the \fBrun action\fP and thus invoke \fBhandler\fP
processing. The handler function will only be invoked if the command
is entered using readline's \fBaccept-line\fP function.

.IP \fB\-\-unmap\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)

Unmap (hide) the terminal window after every command.

.IP \fB\-\-onmap\fP\ <\fIcommand\fP>\ (default:\ \fIempty\fP)

A command to be run after the terminal window has been mapped.

.IP \fB\-\-onunmap\fP\ <\fIcommand\fP>\ (default:\ \fIempty\fP)

A command to be run after the terminal window has been unmapped.

.IP \fB\-\-feedback\fP\ <\fIboolean\fP>\ (default:\ \fItrue\fP)

Show feedback in the form of a progress bar when creating/restoring
the configuration.

.IP \fB\-\-logfile\fP\ <\fIfilename\fP>\ (default:\ \fI/dev/null\fP)

Redirect \fBstderr\fP from launched commands to \fIfilename\fP. Note
that \fIstderr\fP for commands run with root priviledges is discarded
by default.

.IP \fB+mode-\fP<\fIname\fP>\fB-init\fI\ \fB()\ {\ commands;\ }

A function that will be run when the corresponding mode to is
initialized. This is a good place to refine the default setup or to
set bash settings such as \fBPS1\fP or \fBHISTFILE\fP for a specific
mode.

.SS TERMINALS
\fBterminal\fP objects define different terminal command lines to use
for launching commands in. Commands can be matched and associated with
a specific terminal objects using the \fB--match\fP property.

.IP \fB\-\-command\ \fP<\fIcommand\ template\fP>

default: \fI__EXEC_TERMINAL__\fP

Defines the command line used to run the given command as a \fBbash\fP
shell command. Within this string, patterns prefixed with \fI%\fP will
be replaced with their corresponding values in the same way as
described above for the \fB+mode --terminal\fP.

.IP \fB\-\-geometry\fP\ <\fIgeometry\fP>\ (default:\ \fIempty\fP)

Set the value of the \fI%g\fP pattern for the terminal command template.

.IP \fB\-\-font\fP\ <\fIfont\fP>\ (default:\ \fIempty\fP)

Set the value of the \fI%f\fP pattern for the terminal command template.

.IP \fB\-\-match\fP\ <\fIpattern\fP>\ [...]\ (default:\ \fIempty\fP)

Add one or more \fIpattern\fPs to match commands or command lines
with. If an \fBaction\fP requests the command to be run in a terminal,
then if the \fIpattern\fP matches, this terminal is chosen to run the
command in. 

If \fIpattern\fP is a single word, it will be matched verbatim against
the first word of the command line. If the pattern is delimited by
slashes (i.e \fB/\fP\fIpattern\fP\fB/\fP), then the pattern is matched
as a regular expression on the complete command line. Note that
slashes inside the regular expression do \fInot\fP have to be escaped
with a backslash in this notation.

.PP
There are two terminal objects defined by default. The terminal named
\fIdefault\fP will be used if no other terminal matches the given
command and an action has requested the command to be run in a
terminal. Note that any \fIpatterns\fP associated with this terminal
will be implicitly appended to the \fIterm-run\fP \fBrule\fP (see
\fBRULES\fP below). This means that matching commands will always be
run in the \fIdefault\fP \fBterminal\fP, even if this was not
explicitly requested by an \fPaction\fP.

The default \fInotify\fP \fBterminal\fP is a small terminal used by
the default \fBactions\fP \fIterm-notify\fP and \fIsu-term-notify\fP
(see \fBDEFAULT ACTIONS\fP below).

.SH RULES
.SH HANDLERS
.SH ACTIONS
.SH BUGS
Please report any bugs you may find using the email address
below. Comments, suggestions, feedback of any kind is appreciated.
.SH AUTHOR
Henning Bekel <h.bekel at googlemail dot com> (english and german)
.SH "SEE ALSO"
.BR bash (1)
.BR readline (3)
.BR __TERMINAL_NAME__ (1)
.BR su (1)
.BR stty (1)

\" Handler setup:
\"   1. Reorder handlers     
\"     If --fallback is true, move handlers to the end of the chain.
\"     Fallback handlers will end up at the end of the chain in the
\"     order they are defined in this configuration file.    
\"   2. Setup completion    
\"     If --complete is given, create a stub function using the
\"     word given as the function name, so that the word can be
\"     completed to from an empty commandline.    
\"       If a function by the name +handler-<handlername>-complete
\"       is defined, install a completion function for the word
\"       given in --complete that uses the output of the supplied
\"       function to dynamically retrieve a list of words to
\"       complete against.  
\"       If no such function is defined, install default completion
\"       for the word given in --complete.
\" Handler processing: 
\"   Match the line against the regular expression in --pattern
\"     Perform one or more optional tests using the 'test' builtin.
\"     A string of test characters, corresponding to the option
\"     characters of the options to the test builtin, can be given
\"     in --test. Prefixing a test character with '!' negates the
\"     test.  Tests are performed in the order in which they appear
\"     in --test. If one of these tests fails, testing is aborted
\"     and the test as a whole fails.
\"       Rewrite the string depending on its contents:       
\"         If the string contains back references (%[0-9]), replace
\"         them with the string matching the corresponding
\"         subpatterns
\"         If the string contains no back references, append the
\"         line to the string, separating them with a space
\"         character.
\"     If an --action has been specified, run the action on the
\"     resulting string
\"     If no --action has been specified, assume that the string now
\"     constitutes an executable commandline, and launch it in the
\"     background, detached from the bashrun shell.
    

