.\" Process this file with
.\" groff -man -Tascii bashrun.1
.\"
.TH BASHRUN 1 "2010-06-28" "Linux" "User manuals"
.SH NAME
\fBbashrun\fP \- launch applications from interactive bash sessions
.SH SYNOPSIS
\fBbashrun\fP [\fIoptions\fP] [\fIcommand\fP [\fIargs\fP]] [-- \fItermopts\fP]
.SH DESCRIPTION
.PP
\fBbashrun\fP adds application launching capabilities suitable for use
in a graphical user environment to interactive bash sessions.

In its default setup, \fBbashrun\fP provides a simple run dialog by
creating an interactive bash session in a small
\fB__TERMINAL_NAME__\fP(1) terminal window (\fIlauncher\fP mode). It
can also be used from a regular terminal session, allowing the user to
seamlessly launch both graphical and terminal applications from the
command line (either by using the \fIterminal\fP mode or by installing
a lightweight \fBREMOTE CONTROL INTERFACE\fP).
.SH OVERVIEW
Bashrun is composed out of a set of user configurable \fBobjects\fP
that control different aspects of application launching and terminal
window management:

\fBModes\fP control the appearance and behavior of the terminal
hosting the bashrun session, such as the default modes \fIlauncher\fP
and \fIterminal\fP described above.

\fBActions\fP can be bound to key sequences and handle user input in
different ways, such as launching a command in a terminal or looking
up words in a dictionary client.

\fBTerminals\fP allow the user to specify different terminal command
lines to be used for launching console applications, and can be
associated with specific commands or command lines.

\fBRules\fP associate \fBactions\fP with specific commands or command
lines, e.g. to automatically launch certain commands in a
\fBterminal\fP. Regular expressions allow fine grained control over
command matching.

\fPHandlers\fP provide a flexible mechanism for rewriting
non-executable commands, using regular expression matching,
substitution and file test operators, thus offering a way to implement
stuff like file associations or web shortcuts. They also provide a
simple interface to programmable completion.

\fBPlugins\fP allow flexible inclusion and distribution of user
created configuration objects.
.SH COMMAND LINE INTERFACE
The \fBbashrun\fP executable provides a command line interface to
bashrun sessions and can be used to create, select and control bashrun
sessions running in different \fBmodes\fP. It can manage a single
bashrun session for each \fBmode\fP object defined in the
configuration file.

Modes are selected by the \fB-m\fP or \fB\--mode\fP option. If no
\fBmode\fP is specified, the default \fBmode\fP \fIlauncher\fP is
used.

If no session is currently running in the selected \fBmode\fP, then a
session is started in the selected \fBmode\fP. The \fBcommand\fP, if
given, is then applied to the newly created session, unless the
\fBcommand\fP is either \fIexit\fP, \fIwid\fP or \fIpid\fP. If no
\fBcommand\fP is specified, the default \fBcommand\fP \fIshow\fP is
used.
.SS OPTIONS
.IP \fB-m\fP,\ \fB--mode\fP\ \fImode\fP
Select mode to launch or control. In the absence
of this option, the default mode \fIlauncher\fP is used.
.IP \fB--remote-control\fP
Print bash code to create a remote control interface to an existing bashrun
session on stdout. See \fBREMOTE CONTROL INTERFACE\fP.
.IP \fB-d\fP,\ \fB--debug\fP
Enable debugging on startup
.IP \fB-h\fP,\ \fB--help\fP
Show usage information
.IP \fB-v\fP,\ \fB--version\fP
Show version information
.SS COMMANDS 
.IP \fBshow\fP
Show the terminal window. Maps the window, moves it to the current
desktop, moves it above other windows and focuses it. This is the
default command if no command has been specified.
.IP \fBhide\fP
Unmap the terminal window.
.IP \fBtoggle\fP
If the terminal window is not mapped, \fBshow\fP it. If the terminal window
is mapped, \fBhide\fP it.
.IP \fBsmart\fP
If the terminal window is not mapped, not on the current desktop,
obscured by other windows or not focused, then \fBshow\fP it. If none
of these conditions apply, \fBhide\fP the terminal window.
.IP \fBdo\fP\ \fIaction\fP\ [\fIshell-command\fP]
Remotely invoke \fIaction\fP with
\fIshell-command\fP. If the requested action involves
.BR su (1),
the terminal window is shown before invoking the action to allow
the user to enter a password.
.IP \fBsu\fP\ \fIshell-command\fP
Remotely invoke the \fIsu-run\fP action with \fIshell-command\fP. This is
the equivalent to \fBdo\fP \fIsu-run\fP \fIshell-command\fP.
.IP \fBwid\fP
Report the window id of the terminal window.
.IP \fBpid\fP
Report the process id of the bash session.
.IP \fBdebug\fP
Toggle debugging.
.IP \fBreload\fP
Reload configuration files.
.IP \fBrestart\fP
Exit the bashrun session and start a new one.
.IP \fBexit\fP
Exit the bashrun session.
.SH CONFIGURATION
.SS FILES
Bashrun follows the \fBXDG Base Directory Specification\fP to locate
configuration files. If the environment variables
\fIXDG_CONFIG_DIRS\fP and \fI XDG_CONFIG_HOME\fP have not been set,
are empty or include only the default directories defined by the xdg
spec, then the main configuration file will be searched for at the
following locations:
.PP
.RS
.nf\fI
~/.config/bashrun/bashrun.rc
/etc/xdg/bashrun/bashrun.rc
.fi \fP
.RE
.PP
A plugin specified for inclusion with the \fB+plugins\fP directive
(see \fBPLUGINS\fP below) will be searched for in the following
locations:
.PP
.RS
.nf\fI
~/.config/bashrun/plugins/<plugin-name>.rc
/etc/xdg/bashrun/plugins/<plugin-name>.rc
.fi \fP
.RE
.SS SYNTAX
Configuration files \fIbashrun.rc\fP are bash scripts that will be
\fIsourced\fP during the startup of the bashrun session and are
responsible for setting up the configuration functions that contain
actual object definitions as well as additional helper function
definitions for a specific type of object.
.PP
For each object type, bashrun will look for a function
named 
.PP
.RS
\fB+configure-\fP<\fItype\fP>\fBs\fP
.RE
.PP
For example, \fBmode\fP objects are configured by a function named
.PP
.RS
\fI+configure-modes\fP
.RE
.PP
An \fBobject definition\fP consists of an \fBobject initializer\fP,
optionally followed by one or more object \fBproperty definitions\fP on the
same line, followed by one ore more single object \fBproperty definitions\fP
on subsequent lines:
.PP
.RS
\fB+\fP<\fItype\fP> \fB'\fP<\fIname\fP>\fB'\fP [\fB--\fP<\fIproperty-name\fP> \fB'\fP<\fIargs\fP>\fB'\fP...]
.RS
.nf
[\fB--\fP<\fIproperty-name\fP> \fB'\fP<\fIargs\fP>\fB'\fP...]
\[char46]\.\.
.fi
.RE
.RE
.PP
For example, adding the following \fBterminal\fP object definition to
the \fI+configure-terminals\fP function will create a new
\fBterminal\fP object called '\fIsmall\fP' and set its \fBcommand\fP
and \fBgeometry\fP properties:
.PP
.RS
+terminal 'small' 
  --command 'urxvt -g %g -e bash -c %@'
  --geometry '40x12'
.RE
.PP
Note that if an \fBobject initializer\fP refers to a previously defined
object of the same type using the same \fBname\fP, then subsequent
\fBproperty definitions\fP will apply to the existing objects instead of
creating a new object, i.e. the above example could also be written as
.RS
.PP
.nf
+terminal 'small' --command 'urxvt -g %g -e bash -c %@'
+terminal 'small' --geometry '40x12'
.ni
.PP
.RE
.SH MODES
.SH TERMINALS
.SH RULES
.SH HANDLERS
.SH ACTIONS
.SH BUGS
Please report any bugs you may find using the email address
below. Comments, suggestions, feedback of any kind is appreciated.
.SH AUTHOR
Henning Bekel <h.bekel at googlemail dot com> (english and german)
.SH "SEE ALSO"
.BR bash (1)
.BR readline (3)
.BR __TERMINAL_NAME__ (1)
.BR su (1)
.BR stty (1)

\" Handler setup:
\"   1. Reorder handlers     
\"     If --fallback is true, move handlers to the end of the chain.
\"     Fallback handlers will end up at the end of the chain in the
\"     order they are defined in this configuration file.    
\"   2. Setup completion    
\"     If --complete is given, create a stub function using the
\"     word given as the function name, so that the word can be
\"     completed to from an empty commandline.    
\"       If a function by the name +handler-<handlername>-complete
\"       is defined, install a completion function for the word
\"       given in --complete that uses the output of the supplied
\"       function to dynamically retrieve a list of words to
\"       complete against.  
\"       If no such function is defined, install default completion
\"       for the word given in --complete.
\" Handler processing: 
\"   Match the line against the regular expression in --pattern
\"     Perform one or more optional tests using the 'test' builtin.
\"     A string of test characters, corresponding to the option
\"     characters of the options to the test builtin, can be given
\"     in --test. Prefixing a test character with '!' negates the
\"     test.  Tests are performed in the order in which they appear
\"     in --test. If one of these tests fails, testing is aborted
\"     and the test as a whole fails.
\"       Rewrite the string depending on its contents:       
\"         If the string contains back references (%[0-9]), replace
\"         them with the string matching the corresponding
\"         subpatterns
\"         If the string contains no back references, append the
\"         line to the string, separating them with a space
\"         character.
\"     If an --action has been specified, run the action on the
\"     resulting string
\"     If no --action has been specified, assume that the string now
\"     constitutes an executable commandline, and launch it in the
\"     background, detached from the bashrun shell.
    

