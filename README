This is the development version of the next generation of bashrun. All
the basic launch and command line rewriting capabilities are
implemented, such as actions, handlers and application rules. It
doesn't yet provide bashrun in the fashion of a run-dialog, but (maybe
even better) you may use bashrun features for seamlessly launching
applications from your terminal. Most of all it's completely dynamic
and users may add custom actions for extending functionality beyond
what handlers and rules already provide.

A quick tour...

1. Getting Started

$ ./install.sh --prefix=/usr

This will install the source files in /usr/share/bashrun and
put a script called bashrun into /usr/bin. This version will
not interfere with an existing bashrun install.

Now open a terminal and source

$ . /usr/share/bashrun/source

This will initialize the bashrun engine and create directories in the
users home dir. For now these are

~/.config/bashrun/      
~/.local/share/bashrun
~/.cache/bashrun

The engine is now loaded into the current session, although no actions
are yet defined or bound. Copy the rc.example from the install tarball
to your config dir:

$ cp rc.example ~/.config/bashrun/rc

It contains a few example actions and bindings to get you started. You
can now either source the engine again, or just source the rc
file. set BASHRUN_DEBUG=1 to see what's going on.

The basic 'run' action for launching applications is bound to '\x7f',
which should be Ctrl+Backspace. Just type the name of a gui app and hit
Ctrl-Backspace. This will launch the app in the background, detached
from the current shell. For the 'run' action handlers and what was
formerly called "terminal rules" will be applied.

If Ctrl+Backspace doesn't work in your terminal, bind it so something
else, e.g.

+action run --bind '\C-o' 

will bind run to Ctrl-o.

2. Actions

Now let's take a look at the "run" action and how it's implemented. Type

$ +action run --code

This will echo:

+action --new 'run'
--desc 'Run command'
--type 'trap'
--bind '\x7f'
--bind '\x7f' 'vi-insert'

action-run () 
{ 
    ! executable? && +handlers;
    executable? && +rules;
    return 0
}

The +action command is used to create and configure new actions. It
can be used in an rc file or directly from the commandline. The --code
option outputs the action in a form that can be sourced again.

Note that the above action could have been written on a single line as
well. The --options are also implemented as standalone
commands. Bashrun has a notion of a current working object and
type. +action <action-name> will select an object of type "action" and
make it the current object. Any subsequent --option commands will
apply to this action.

To make it easier to see what's going on, hit Alt+e. This will change
the prompt to display the current object type and overload the ls
command to list all the objects of the current type. Hitting Alt+e
again will exit this "edit mode". Command completion is provided for
easy browsing of available options and actions:

$ +action<TAB>
--bind           --new            map              su-run
--code           --rebind         pass             su-run-term
--deps           --shutdown       ping             toggle
--desc           --type           run              unmap
--help           --unbind         run-hold         
--init           edit-mode-enter  run-page         
--name           edit-mode-leave  run-term 

This lists the available options for actions as well as the existing
actions.

To switch to a different object type (currently there's handlers and
rules):

$ +<TAB>
+action   +handler  +rule

So much for this. It isn't necessary to configure bashrun from the
commandline, you can simply edit your rc file and source it. The
commandline interface still needs polishing... just try to tab your
way around it if you're interested.

 Let's look at the definition of the run action line by line:

+action --new 'run' 

   	creates the 'run' action (if it already exists, it will become
   	the current object)

--desc 'Run command' 

       Set a short description that can be displayed to the user

--type 'trap'

       Sets the action type. These are probably going to change and be
       simplified, but for now there are

       "trap" (default)

           This uses a debug trap to successively process the commands
           on the commandline and then launch them in the
           background. Use this if you want to create the resulting
           command using the command or commandline as input.

       "launch"

           This can be used if you're not interested in user input,
           but just assemble and launch some standalone command using
           a keybinding. The user's current line will be preserved.

       "shell" 

           This runs the action directly in the bashrun shell (think
           resize, toggle visibility, etc)
	 
--bind '\x7f'

           bind the action to a keyseq (default is to use the emacs
           keymap)

--bind '\x7f' 'vi-insert'

           the same for the 'vi-insert' keymap

There's also

--unbind 
	 
	 unbind the action from it's latest binding. If the key had
	 been bound in readline prior to binding it to this action,
	 the original readline binding will be restored.

--rebind 

	 Rebind the action to the key it was formerly bound to.

--code 

         Output action as shell code

And some more properties:

--deps  

	space separated list of commands that are needed for this
	action. (e.g. if you use xdotool in an action function, list
	it here). Not used yet, but will be.

--help 

	Any long help text for this action. Not used yet, but will be.

--init, --shutdown 

	Will be eval'ed when the engine is initialized or
	shutdown. Actions may need to initialize a global variable, or
	restore some state back when the engine exits. (e.g. see the
	end of rc.example)

The action function:

action-run () 
{ 
    ! executable? && +handlers;
    executable? && +rules;
    return 0
}

The action functions need to be called "action-<action-name>" for
bashrun to find them. An action function is responsible for assembling
the final command that will be executed by bashrun, possibly using the
commands the user entered as input. For this purpose there will be a
few convenience functions defined while bashrun executes the action
function.

All these helper functions test on or modify the current command:

command [newcommand]
 
   Set or get the current command. If an argument is supplied, the
   command will be set, without an argument it's contents will be
   echoe'd. So to use the command as an argument to another command,
   use e.g.
   
   command "figlet '$(command)'"

line

   Echo the complete, verbatim command line entered by the user. This
   may contain multiple simple commands (e.g. 'echo foo; echo bar')

There are some test actions that can be used to test the current
commandline:

executable?

	returns 0 if the first word of the current command is
	executable, 1 otherwise

builtin?

	check if the first word is a builtin

bookmark?

	check if the current command is a bashrun bookmark.

And finally, the commands to modify the commandline

+handlers

	try to match and apply handlers

+rules 

       try to match and apply rules (associating certain commands with
       actions)

+pager
	appends '| ${PAGER:-less -f'

+terminal

	wraps the command in "xterm -e '\$(command)'" 

	(this currently defaults to xterm only, it will later use the
	correct terminal chosen by the user in the config)

+user [username]

      wraps the command in "su username -c '$(command)'"
      user defaults to 'root'

return value

       0: A return value of 0 tells bashrun to go ahead and execute
       the command.

       1: Returning 1 will prevent execution by bashrun. Use this if
       you want to process user input but not let bashrun execute any
       command.

So, what the above "run" action does is
    
    1. check if the command is executable, if not, try to make it
       executable by applying handlers.

    2. if it's executable by now, apply the user's rules (e.g. for
       launching certain commands in a terminal by default).

    3. return 0 (tell bashrun to go ahead). If the command isn't
       executable, bashrun won't run it.

If your action doesn't work as expected, set BASHRUN_DEBUG=1 and check
the output. If you have any trouble, or suggestions, please contact me
(<h.bekel@googlemail.com). These features are experimental and may
change/be further refined. I can't possibly imagine anything what you
might want to do, so if you hit a snag or need it to work differently,
feel free to contact me.

Handlers and rules work like they did in previous versions. Rules have
been generalized, though:

+rule --new <action-name> --progs "list of programs"

You can associate commands with any action. You can also use a regexp
inside the --progs string, e.g.

+rule --new run-page --progs "/^ls/"

can be used to launch any command beginning with ls (ls, lsmod, lspci
etc) in a terminal and page the output. Note that the enclosing
slashes are for bashrun only, so you don't need to escape slashes
inside your regexp. E.g.

+rule --new su-run --progs '/emacs /etc//' 

(will automatically launch emacs as root if you feed it a path
beginning with /etc/, but still launch it as a regular user for other
paths. This might get file test operators similar to the handlers
later)
 
3. Remote invocation of bashrun actions.

The only binary provided with this version is
/usr/bin/bashrun. It can be used to remotely invoke an action
in the latest running instance of bashrun:

$ bashrun <action-name> <commandline>

(There will be a way of naming instances in the future to be able to
explicitly choose the bashrun instance that is used to run the action.)

Note that if you run it from a shell that runs the engine, the command
will be invoked in that same instance for now. So be sure to run it
from a shell that doesn't use a bashrun engine.

For example, try

$ bashrun map
$ bashrun unmap
$ bashrun toggle

To change the map state of the terminal window.

For more examples of actions and how they can be implemented, see the
example rc file.

4. Possible issues

Since sourcing the configuration can be expensive and take some time,
bashrun will maintain state across invocations, allowing for much
faster startup times. This seems to work well, but might still screw
up it's state... to force a rereading of the rc file, change or touch
it, and bashrun will source it again on the next startup. This feature
will probably be configurable later. Note that this means that if you
add new actions at runtime these will persist until the next time the
rc file gets sourced. to save an action permanently to the rc, use sth
like

+action --code >> ~/.config/bashrun/rc

--code is available for +handler and +rule as well...

(There will be proper "save/restore everything" commands for this
later)

Note that launching a command will echo the commandline twice in
bash... This is because bash sends a rl_crlf() (carriage return/line
feed) when executing a command via a keyseq. You may want to work
around this little glitch by patching bash (in bashline.c, comment out
the call to rl_crlf() in the execute_unix_command function). I'm using
this and haven't seen any problems so far...

5. Experimental status

This is still in the experimental phase. If you have problems or
suggestions, please contact me via email:

Henning Bekel <h.bekel@googlemail.com> (english and german)

I can sometimes be found on irc.freenode.net #archlinux, nick is
hbekel.

Have fun!



 
