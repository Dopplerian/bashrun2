# -*- shell-script -*-

################################################################################

BASHRUN_ACTION=''
BASHRUN_EXECMODE=''
BASHRUN_ENGINE_BUSY=0
BASHRUN_LOGFILE=${BASHRUN_LOGFILE:-/dev/null}

function bashrun.engine.init {
    
    bashrun.engine.busy

    bashrun.separator "bashrun-engine $BASHRUN_VERSION"

    progress.update +10 "Initializing... [window]"

    # set wid to terminal $WINDOWID
    bashrun.window.id $WINDOWID

    # get current readline bindings
    bashrun.debug "getting current readline bindings..."
    readline_get_bindings

    progress.update +5
        
    # load/restore configuration
    bashrun.configure

    §handlers.install_completion

    # run init callbacks
    bashrun.debug -v "+action" -v "--init" "callbacks..."
    §actions.init

    # reset object positions
    objects.seek_start

    progress.update +5 "Initializing... [engine]"

    # switch to initial mode passed from env
    §modes.seek "$BASHRUN_MODE"
    §mode.switch

    # enable extdebug and prepare escape from trap
    # (bashdb bugs out if extdebug is set directly from a startup file)
    PROMPT_COMMAND="trap DEBUG; shopt -s extdebug;$PROMPT_COMMAND"

    # init exec mode
    BASHRUN_EXECMODE='&'

    # install command_not_found_handle for bash>=4 -> handle
    if bash4; then
	function command_not_found_handle {
	    if [[ BASHRUN_CMD_NOT_FOUND_HANDLE -eq 1 ]]; then
		bashrun.engine.idle && bashrun.engine.action run 0 "$*"
	    fi
	}
    fi

    # shutdown on exit
    trap bashrun.engine.shutdown EXIT
    
    bashrun.debug emph -y "done"

    bashrun.separator 
    
    progress.destroy

    bashrun.engine.idle
}

function bashrun.engine.action {

    local action=$1       # action to perform
    local accept=$2       # --accept override
    local command="$3"    # command override

    bashrun.separator "engine $action $command"

    if §actions.seek $action; then
	
	bashrun.engine.busy
	BASHRUN_RULES_APPLIED=0

	BASHRUN_ACTION=$action

	# overrides
	[[ -z "$accept" ]] && accept=$(§action.get_accept)
	
	bashrun.debug "action" -v "$action" "accept" -c "$accept"

	case $accept in
	    
	    1)
	        # accept input via trap
		bashrun.debug "accepting input from" -c "DEBUG trap"
		trap bashrun.engine.trap DEBUG
		;; 
	    
	    0)
		# launch directly 
		bashrun.engine.launch "$command"
		;;	    
	esac
    else
	bashrun.debug fail "no such action:" -v "$action"
    fi
}

function bashrun.engine.trap {
    
    # the verbatim command line entered
    BASHRUN_COMMAND_LINE=$(bashrun.command.get_line)

    # the command about to be executed,
    # as expanded by the shell
    BASHRUN_COMMAND="$BASH_COMMAND"
    
    # assume execmode background
    BASHRUN_EXECMODE="&"

    # remove quotes (;|&)
    bashrun.command.unquote

    # pass through trap builtin
    if [[ "$BASHRUN_COMMAND" =~ ^trap ]]; then
	bashrun.debug -v "trap" -c "removed"
	bashrun.engine.busy? && bashrun.engine.reset 
	return 0
    fi
    bashrun.debug "command:" -v "$BASHRUN_COMMAND"
    bashrun.debug "   line:" -v "$BASHRUN_COMMAND_LINE"

    bashrun.engine.launch

    return 1
}

function bashrun.engine.launch {

    local command="$1"
    local status=0

    # command override
    if [[ "$command" != '' ]]; then
	bashrun.debug -c override -v "$command"
	BASHRUN_COMMAND="$command"
	BASHRUN_COMMAND_LINE="$command"
    fi
    
    if §actions.seek "$BASHRUN_ACTION"; then
	if §action.function?; then
	    §action.run
	    status=$?
	    if [[ status -ne 0 ]]; then
		[[ status -eq 1 ]] && bashrun.engine.reset 
		[[ status -eq 2 ]] && bashrun.engine.reset 0
		return 0
	    fi
	fi
    fi
    bashrun.debug "$BASHRUN_COMMAND"
    
    bashrun.engine.execute
    bashrun.engine.reset
    return 0
}

function bashrun.engine.execute {

    bashrun.prepare_logfile

    # execute command
    if [[ "$BASHRUN_EXECMODE" == "&" ]]; then
	/bin/bash -c "$BASHRUN_COMMAND >> $BASHRUN_LOGFILE 2>&1 &" > /dev/null 2>&1
    else
	# this can only be a su command (so far)
	/bin/bash -c "$BASHRUN_COMMAND"
    fi
}

function bashrun.engine.reset {

    local unmap=${1:-1}

    # reset rules
    BASHRUN_RULES_APPLIED=0

    # reset terminal
    §terminals.seek default
    
    # disable action api here to allow nested actions
    §action.api.disable 

    # unmap the window if requested/necessary
    [[ unmap -eq 1 ]] && §mode.unmap? && bashrun.window.unmap

    bashrun.engine.idle

    bashrun.debug -c "reset"

    bashrun.separator
}

function bashrun.engine.busy {
    BASHRUN_ENGINE_BUSY=1
}

function bashrun.engine.busy? {
    [[ "$BASHRUN_ENGINE_BUSY" == "1" ]]
}

function bashrun.engine.idle {
    BASHRUN_ENGINE_BUSY=0
}

function bashrun.engine.idle? {
    [[ "$BASHRUN_ENGINE_BUSY" == "0" ]]
}

function bashrun.engine.shutdown { 

    # remove this instance from registry
    bashrun.registry.remove
    bashrun.debug "exit"
}    
