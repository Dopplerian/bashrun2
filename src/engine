# -*- shell-script -*-

################################################################################

BASHRUN_ACTION=''
BASHRUN_EXECMODE=''
BASHRUN_ENGINE_BUSY=0

#BASHRUN_RCFILE=$BASHRUN_CONFIG_HOME/rc
# for development:
BASHRUN_RCFILE=$HOME/workspace/bashrun/rc.example

BASHRUN_TIMESTAMP=$BASHRUN_CACHE_HOME/timestamp

BASHRUN_LOGFILE=/dev/null
BASHRUN_PIDFILE=$BASHRUN_CACHE_HOME/pids

[[ ! -f $BASHRUN_PIDFILE ]] && touch $BASHRUN_PIDFILE

function bashrun.engine.init {
    
    bashrun.separator "bashrun-engine $BASHRUN_VERSION"
    
    # append pid to shared pidfile
    echo $$ >> $BASHRUN_PIDFILE

    # get current readline bindings
    readline_get_bindings
    
    # install default actions
    bashrun.engine.default_actions
    
    # source rc file or restore dumped state
    if [[ "$BASHRUN_RCFILE" -nt "$BASHRUN_TIMESTAMP" ]]; then
	source $BASHRUN_RCFILE
	touch $BASHRUN_TIMESTAMP
    else    
	objects.restore
    fi

    # run init callbacks
    actions.init

    # escape from trap in interactive mode
    PROMPT_COMMAND="trap DEBUG; $PROMPT_COMMAND"

    # enable extended debugging features
    shopt -s extdebug

    # init exec mode
    BASHRUN_EXECMODE='&'

    # shutdown on exit
    trap bashrun.engine.shutdown EXIT
    
    bashrun.separator
}

function bashrun.engine.action {

    local action=$1       # action to perform
    local type=$2         # action type override
    local command="$3"    # command override

    bashrun.separator "engine $action"

    if actions.seek $action; then

	# wait until engine is ready
	while bashrun.engine.busy?; do
	    sleep 0.25
	done

	bashrun.engine.busy 1

	BASHRUN_ACTION=$action

	# type override
	[[ $type == '' ]] && type=$(action.get_type)

	bashrun.debug "$action ($type)"

	# dispatch action according to type
	case $type in
	    
	    trap-and-launch)
	        # set the trap
		bashrun.debug "trap is set"
		trap bashrun.engine.trap DEBUG
		;; 
	    
	    launch)
		# command override
		[[ $command == '' ]] && command=':'
     
		# run action directly
		bashrun.engine.launch "$command"
		;;
	    
	    shell)
		# just run action here
		if action.function?; then
		    action.run
		    bashrun.separator
		fi
		bashrun.engine.busy 0
		;;
	    *)
		bashrun.debug "no such action type: $type"
		;;
	esac
    else
	bashrun.debug "no such action: $action"
    fi
}

function bashrun.engine.trap {
    
    # the verbatim command line entered
    BASHRUN_COMMAND_LINE=$(bashrun.command.get_line)

    # the command about to be executed,
    # as expanded by the shell
    BASHRUN_COMMAND="$BASH_COMMAND"
    
    # assume execmode background
    BASHRUN_EXECMODE="&"

    # remove quotes (;|&)
    bashrun.command.unquote
    
    # pass through trap builtin
    if [[ "$BASHRUN_COMMAND" =~ ^trap ]]; then
	bashrun.debug emph "trap is removed"
	bashrun.separator 
	bashrun.engine.busy 0
	return 0
    fi
    bashrun.debug "$BASHRUN_COMMAND"

    bashrun.engine.launch

    bashrun.separator 

    return 1
}

function bashrun.engine.launch {

    local command=$1

    # command override
    if [[ $command != '' ]]; then
	BASHRUN_COMMAND="$command"
	BASHRUN_COMMAND_LINE="$command"
    fi

    if actions.seek $BASHRUN_ACTION; then
	if action.function?; then
	    if ! action.run; then
		BASHRUN_RULES_APPLIED=0
		bashrun.engine.busy 0
		bashrun.separator
		return 0
	    fi
	fi
    fi

    bashrun.debug "$BASHRUN_COMMAND"
    
    if bashrun.command.executable?; then
	bashrun.engine.execute
    else
	bashrun.debug fail "not executable."
    fi

    BASHRUN_RULES_APPLIED=0
    bashrun.engine.busy 0
    return 0
}

function bashrun.engine.execute {

    bashrun.prepare_logfile

    # execute command
    if [[ "$BASHRUN_EXECMODE" == "&" ]]; then
	/bin/bash -c "$BASHRUN_COMMAND >> $BASHRUN_LOGFILE 2>&1 &" > /dev/null 2>&1
    else
	# this can only be a su command (so far)
	/bin/bash -c "$BASHRUN_COMMAND"
    fi
}

function bashrun.engine.busy {
    BASHRUN_ENGINE_BUSY=$1
}

function bashrun.engine.busy? {
    [[ "$BASHRUN_ENGINE_BUSY" == "1" ]]
    return $?
}

function bashrun.engine.default_actions {

    +action --new 'pass'
    --desc 'passthrough command'
    --type 'shell'
    --bind '\ew'
    
    action-pass () 
    { 
	:
    }

    +action --new 'ping'
    --desc 'Pong the process that pinged.'
    --type 'launch'
    
    action-ping () 
    { 
	kill -USR1 $(command);
	return 1
    }
}

function bashrun.engine.shutdown { 

    # run shutdown callbacks
    actions.shutdown

    # dump user data
    objects.dump

    # remove this pid from the pidfile
    local pid=''
    echo -n '' > $BASHRUN_PIDFILE.tmp

    for pid in $(cat $BASHRUN_PIDFILE); do
	if [[ "$pid" != "$$" ]]; then
	    echo $pid > $BASHRUN_PIDFILE.tmp
	fi
    done
    mv $BASHRUN_PIDFILE.tmp $BASHRUN_PIDFILE

    # remove untrap from prompt command
    PROMPT_COMMAND=${PROMPT_COMMAND/trap DEBUG\;/}

    # disable extended debugging features
    shopt -u extdebug

    bashrun.remote.cleanup    

    bashrun.debug "exit"
}    
