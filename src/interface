# -*- shell-script -*-

################################################################################
#
# User interface functions
#
# These function provide a commandline interface to creating and
# changing actions and binding them.
#
# §action
# §name
# §type
# §desc
# §add
# §bind
# §unbind
# §rebind
# §code
# §ls
#
################################################################################

function §action {
    local action=$1
    if actions_seek $action; then
	shift
    else
	action=$(action_name)
    fi

    if actions_seek $action; then
	action_pretty_print
    else
	echo "error: no such action: $action"
	return 1
    fi
}

function §make {
    actions_add "$1" "$2" "$3" "$4"

    if [[ "$1" == '' ]]; then
	echo "error: missing action argument"
	return 1
    fi

    if ! action_has_function?; then
	eval "function action-$1 { :; }"
    fi
    return 0
}

function §name {

    local action=$1
    if actions_seek $action; then
	shift
    else
	action=$(action_name)
    fi
    echo $(action_name)
}

function §desc {

    local num_args=$#
    local action=$1
    local value=''

    if actions_seek $action; then
	shift
	(( num_args-=1 ))
    else
	action=$(action_name)
    fi
    value=$1

    if actions_seek $action; then
	if [[ "$num_args" == "1" ]]; then
	    action_set_desc "$value"
	else
	    echo "$(action_desc)"
	fi
    else
	echo "error: no such action: $action"
	return 1
    fi
    return 0	
}

function §type {

    local num_args=$#
    local action=$1
    local value=''

    if actions_seek $action; then
	shift
	(( num_args-=1 ))
    else
	action=$(action_name)
    fi
    value=$1

    if actions_seek $action; then
	if [[ "$num_args" == "1" ]]; then
	    action_set_type "$value"
	else
	    echo "$(action_type)"
	fi
    else
	echo "error: no such action: $action"
	return 1
    fi
    return 0	
}

function §help {

    local numargs=$#
    local action=$1
    local help=$2

    if [[ "$action" == '' ]]; then
	actions_help
	return 0
    fi

    if actions_seek $action; then
	if [[ "$numargs" == "2" ]]; then
	    action_set_help "$help"
	else
	    echo "$(action_help)"
	    echo
	fi
    else
	echo "error: no such action: $action"
	return 1
    fi
    return 0	
}

function §bind {

    local action=$1
    local keyseq=$2
    local keymap=$3
    local keyname=$4

    if [[ "$keyseq" == '' ]]; then
	echo "error: missing keyseq argument"
	return 1
    fi

    if actions_seek $action; then
	action_bind $keyseq $keymap "$keyname"
	return $?
    else
	echo "error: no such action: $action"
	return 1
    fi
}

function §unbind {

    local action=$1
    local keymap=$2
    local keyseq=$3
    if actions_seek $action; then
	action_unbind "$keymap" "$keyseq"
	return $?
    else
	echo "error: no such action: $action"
	return 1
    fi
}

function §rebind {

    local action=$1
    local keymap=$2

    if actions_seek $action; then
	action_rebind $keymap
	return $?
    else
	echo "error: no such action: $action"
	return 1
    fi
}

function §code {

    if [[ $# -gt 0 ]]; then
	if [[ "$1" == "--all" ]]; then
	    actions_code
	    return
	fi

	local id
	for id in $@; do
	    if actions_seek $id; then
		action_code
	    fi
	done
    else
	actions_code
    fi
}

function §ls {

    if [[ $# -gt 0 ]]; then
	if [[ "$1" == "--all" ]]; then
	    actions_pretty_print
	    return
	fi

	local id
	for id in $@; do
	    if actions_seek $id; then
		action_pretty_print
	    fi
	done
    else
	actions_pretty_print
    fi
}

function §handler {
    handler_new "$1" "$2"
}

function §bookmark {
    bookmark_new "$1"
}

# completion

_bashrun_actions() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="$(actions_names)"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
        return 0
    fi
}

complete -F _bashrun_actions §action \
    §name \
    §type \
    §desc \
    §bind \
    §unbind \
    §rebind \
    §code \
    §ls


################################################################################
