# -*- shell-script -*-

################################################################################

+configure-core-modes () {

    +mode launcher
      --terminal 'xterm -geometry %g -name %n %o -e %*'
      --geometry '40x1 40x8'
      --completion 'menu-complete complete 8'
      --unmap true
      --feedback true
      --logfile '/dev/null'

    +mode-launcher-init () {	
	
	HISTFILE="$($bashrun_data_home/history)"
	PS1='>'
	stty -ixon
	stty eof 0201
    }

    +mode terminal
      --terminal 'xterm -geometry %g -name %n %o -e %*'
      --cmdnfh true

    +mode-terminal-init() {

	+keymap emacs
	+unbind run      '\C-m'
	+unbind run      '\C-j'
	+unbind term-run '\e\C-m'
	+unbind pass     '\ew'
	+unbind quit     '\C-q'
	+unbind abort    '\C-g'

	+bind run '\e\C-m'
	+bind term-run '\et'
    }    
}

+configure-core-terminals () {
    
    +terminal default --command "xterm -e bash -c %@"

    +terminal notify 
      --command "xterm -g %g -e bash -c %@"
      --geometry "40x4+0+0"
}

+configure-core-rules () {
    +rule term-page --match 'dict'
 }

+configure-core-handlers () { :; }
+configure-core-bookmarks () { :; }
+configure-core-emacs-mode () { :; }
+configure-core-vi-mode () { :; }

+configure-core-actions () {

    # temporary function to set the (otherwise readonly) boolean
    # 'core' property
    function §action.set_core {

	local input="$1";
	local value=0;

	[[ -n "$input" ]] && value=1;
	[[ "$input" =~ ^([Yy]es|[Tt]rue|[Oo]n|1)$ ]] && value=1;
	[[ "$input" =~ ^([Nn]o|[Ff]alse|[Oo]ff|0)$ ]] && value=0;

	_bashrun_actionS[${_bashrun_actionS_POSITION}+5]="$1"
    }

    +action 'reload'
      --description 'Reload configuration'
      --input 0
      --core 1

      function +action-reload {
	  bashrun_status="Reloading..."
	  bashrun_engine_reload=1
	  return 2
      }

    +action 'pass'
      --description 'Passthrough command'
      --input 0
      --core 1

      function +action-pass { 
 	  $bashrun_command
	  return 2 
      } 

    +action 'abort'
    --description 'Abort (unmap window)'
    --input 0
    --core 1
    
    +action-abort () {
	§bash4 && READLINE_LINE=""
	§window.unmap
	return 1
    }

    +action 'quit'
    --description 'Exit bashrun'
    --input 0
    --core 1
    
    +action-quit () {
	shopt -u checkjobs
	exit 0
    }
    
    +action 'debug'
    --description "Toggle debugging"
    --input 0
    --core 1
    
    +action-debug () {
	
	if [[ BASHRUN_DEBUG -eq 0 ]]; then
	    BASHRUN_DEBUG=1
	    §debug "debug mode" -g "enabled"
	    §window.geometry "80x24"
	else
	    §window.geometry "$(§mode.get_geometry $(§mode.get_current))"
	    §debug "debug mode" -r "disabled"
	    tput clear
	    BASHRUN_DEBUG=0
	fi
	return 2
    }
    
    +action 'run'
    --description 'Run command'
    --input 1
    --core 1
    
    +action-run () 
    { 
	! executable? && handlers
	§rules.apply
	return 0
    }
    
    +action 'term-run'
    --description 'Run command in terminal'
    --input 1
    --core 1
    
    +action-term-run () 
    { 
	! executable? && handlers
	terminal
	return 0
    }
    
    +action 'term-page'
    --description 'Run command in terminal and page'
    --input 1
    --core 1
    
    +action-term-page () 
    { 
	! executable? && handlers
	pager
	terminal
	return 0
    }
    
    +action 'term-hold'
    --description 'Run command in terminal and hold'
    --input 1
    --core 1
    
    +action-term-hold () 
    { 
	! executable? && handlers
	hold
	terminal
	return 0
    }

    +action term-notify
      --description 'Run command in terminal and hold for two seconds'
      --core 1
      --input 1

    +action-term-notify () 
    { 
	! executable? && handlers
	hold 2
	terminal notify
	return 0
    }
    
    +action 'su-run'
    --description 'Run command as root'
    --input 1
    --depends 'su'
    --core 1
    
    +action-su-run () 
    { 
	action run
	user root
	return 0
    }
    
    +action 'su-term-run'
    --description 'Run command in terminal as root'
    --input 1
    --depends 'su'
    --core 1
    
    +action-su-term-run () 
    { 
	action term-run
	user root
	return 0
    }
    
    +action 'su-term-page'
    --description 'Run command in terminal as root and page'
    --input 1
    --depends 'su'
    --core 1
    
    +action-su-term-page () 
    { 
	action term-page
	user root
	return 0
    }
    
    +action 'su-term-hold'
    --description 'Run command in terminal as root and hold'
    --input 1
    --depends 'su'
    --core 1
    
    +action-su-term-hold () 
    { 
	action term-hold
	user root
	return 0
    }

    +action su-term-notify
      --description 'Run command in terminal as root and hold for two seconds'
      --core 1
      --input 1    
      --depends 'su'
    
    +action-su-term-notify () 
    { 
	action term-notify
	user root
	return 0
    }
    
    +action 'show-manual'
    --description 'Show manual page for command'
    --input 1
    --depends 'man'
    --core 1
    
    +action-show-manual () {
	command "man $(word)"
	terminal
	return 0
    }
    
    +action 'show-info'
    --description 'Show info page for command'
    --input 1
    --depends 'info'
    --core 1
    
    function +action-show-info {
	command "info $(word)"
	terminal
	return 0
    }
    
    +action 'show-help'
    --description 'Show help for bash builtin'
    --input 1
    --core 1
    
    function +action-show-help {
	if builtin?; then
	    command "help $(word)"
	    pager
	    terminal
	    return 0
	else
	    debug "$(word): not a builtin, showing manual"
	    action show-manual
	fi	    
    }

    +action copy-to-clipboard
      --description "Copy command output to clipboard"
      --core 1

    function +action-copy-to-clipboard {
	command "($(command)) | xclip"
	return 0
    }
    
    +action filter-clipboard 
      --description "Run command as filter on clipboard"
      --depends 'xclip'
      --core 1

    function +action-filter-clipboard {	
	command "xclip -o | ($(command)) | xclip -i"
    }
    
    +action 'browse'
    --description 'Open page in $BROWSER'
    --input 1
    --core 1
    
    function +action-browse {
	quote-command
	command "$BROWSER $(command)"
	return 0
    }
    
    +action 'google-search'
    --description 'Google words using $BROWSER'
    --input 1
    --core 1
    
    function +action-google-search {

	command "http://www.google.com/search?q=$(command)"
	action browse
	return 0
    }
    
    +action 'dict-lookup'
    --description 'Lookup words in $DICT'
    --input 1
    --core 1
    
    function +action-dict-lookup {
	command "$DICT $(command)"
	action term-page
	return 0
    }
    
    +action 'bashrun-manual'
    --description 'Show bashrun manual'
    --input 0
    --depends 'man'
    --core 1
    
    function +action-bashrun-manual {
	command "bashrun"
	action show-manual
    }

    +action 'bashrun-bindings'
    --description 'Show current keybindings'
    --input 0
    --core 1
    
    function +action-bashrun-bindings {

	local tmpfile=$bashrun_cache_home/keybindings
	if [[ ! -f "$tmpfile" ]]; then
	    §print_bindings > $tmpfile
	    §bindings.modified 0

	elif §bindings.modified?; then
	    §print_bindings > $tmpfile
	    §bindings.modified 0
	fi
	command "cat $tmpfile"
	action term-page
	return 0
    }

    +action 'cycle-size'
    --description 'Cycle through geometries of the current mode'
    --input 0
    --core 1
    
    function +action-cycle-size {

	if [[ -n "$(§mode.get_geometry 1)" ]]; then
	    
	    local current="$(§mode.get_current)"
	    ((current+=1))

	    local next="$(§mode.get_geometry $current)"
	    if [[ "$next" == '' ]]; then
		current=0
	    fi
	    next="$(§mode.get_geometry $current)"

	    §window.geometry "$next"
	    §mode.set_current $current	
	fi
	tput clear
	return 2
    }

    +action resize-up
      --description "Resize terminal up"
      --input 0
      --core 1

    +action-resize-up() {
	§window.resize up
	return 2
    }

    +action resize-down
      --description "Resize terminal down"
      --input 0
      --core 1

    +action-resize-down() {
	§window.resize down
	return 2
    }

    +action resize-left
      --description "Resize terminal left"
      --input 0
      --core 1

    +action-resize-left() {
	§window.resize left
	return 2
    }

    +action resize-right
      --description "Resize terminal right"
      --input 0
      --core 1

    +action-resize-right() {
	§window.resize right
	return 2
    }
      
    # remove temporary setter function
    unset -f §action.set_core
}


