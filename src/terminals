# -*- shell-script -*-

################################################################################

§class "§terminal" "name command geometry font match cache" ""

################################################################################

§function.clone "§terminal.new" "§terminal._new"
§function.clone "§terminal.set_match" "§terminal._set_match"
§function.clone "§terminals.init" "§terminals._init"
§function.clone "§terminal.get_command" "§terminal._get_command"

function §terminal.new { 

    §terminal._new "$1"
    §terminal.set_command "xterm -e bash -c %@"
}

function §terminal.set_match {

    local match="$(§terminal.get_match)"
    if [[ -z "$match" ]]; then
	match="$@"
    else
	match+=" $@"
    fi
    §terminal._set_match "$match"
}

function §terminals.init {
    bashrun_terminals_used="$(§terminals.used)"
    §terminals._init
}

function §terminal.init {
   §terminal.set_cache ""
   §terminal.get_command &>/dev/null
}

function §terminal.get_command {
    
    local command="$(§terminal._get_command)"
    local cached="$(§terminal.get_cache)"

    if [[ -z "$cached" ]]; then
	local geometry="$(§terminal.get_geometry)"
	local font="$(§terminal.get_font)"
	local mode="$BASHRUN_MODE"

	cached="$(§terminal.expand "$command" "" "$mode" "$geometry" "$font")"
	§terminal.set_cache "$cached"	
    fi
    echo "$cached"
}

function §terminal.expand {
    local template="$1"
    local command="$2"
    local mode="$3"
    local geometry="$4"
    local font="$5"
    local options="$6"
    
    local word="" tmp="" method=""
    declare -i i=0

    # insert classname, geometry, font and options
    if [[ "$template" =~ [^\\]%n ]]; then
	template="$(§replace "$template" "%n" "bashrun-$mode")"
    fi

    if [[ "$template" =~ [^\\]%g ]]; then
	template="$(§replace "$template" "%g" "$geometry")"
    fi

    if [[ "$template" =~ [^\\]%f ]]; then
	template="$(§replace "$template" "%f" "$font")"
    fi

    if [[ "$template" =~ [^\\]%o ]]; then
	template="$(§replace "$template" "%o" "$options")"
    fi

    # insert command if given...

    # %* insert command split into words
    # %@ insert command as a single word (one level of quoting)
    # %@@, %@@@, ... add two, three, etc. levels of quoting
    if [[ -n "$command" ]]; then
	if [[ "$template" =~ [^\\]%((@|\*)+) ]]; then
	    method="${BASH_REMATCH[1]}"
	    
	    if [[ "$method" =~ @ ]]; then
		§quote ${#method} command
	    fi
	    
	# insert command into template
	    template="$(§replace "$template" "%$method" "$command")"
	    
	else
	# append command to template
	    template+=" $command"
	fi
    fi

    echo "$template"
}

function §terminal.binary {
    local binary=""
    for binary in $(§terminal.get_command); do break; done
    echo "$binary"
}

function §terminal.list {
    local opt="$1"

    if [[ "$opt" == '-l' ]]; then
	local key
	for key in ${_BASHRUN_TERMINALS_KEYS[@]}; do
	    if [[ "$key" == "command" ]]; then
		echo "$key: $(§terminal._get_command)"
	    else
		echo "$key: $(§terminal.get $key)"
	    fi
	done;
	echo
    else
	echo $(§terminal.id)
    fi
}

function §terminal.code {
    
    local name="$(§terminal.get_name)"
    local command="$(§terminal._get_command)"
    local geometry="$(§terminal.get_geometry)"
    local font="$(§terminal.get_font)"
    local match="$(§terminal.get_match)"

    echo "+terminal '$name'"
    echo "  --command '$command'"
    [[ -n "$geometry" ]] && echo "  --geometry '$geometry'"
    [[ -n "$font" ]] && echo "  --font '$font'"
    [[ -n "$match" ]] && echo "  --match '$match'"
    echo
}

function §terminals.used {
    local used=""
    local saved="$(§terminal.get_name)"
    local binary=""

    §terminals.seek_start
    while §terminals.next?; do
	
	binary="$(§terminal.binary)"	
	if [[ ! " $used " =~ $binary ]]; then
	    used="$binary $used"
	fi
	§terminals.next
    done
    §terminals.seek "$saved"
    
    echo "$used"
}

function §terminals.get_match {
    local saved="$(§terminal.get_name)"
    local match=""

    §terminals.seek_start
    while §terminals.next?; do
	match+="$(§terminal.get_match) "
	§terminals.next
    done

    §terminals.seek "$saved"

    echo "$match"
}