# -*- shell-script -*-

################################################################################

§class "§terminal" "name command cooked geometry font terminal" ""

################################################################################

§function.clone "§terminal.new" "§_terminal.new"
§function.clone "§terminal.get_command" "§_terminal.get_command"

function §terminal.new { 

    §_terminal.new "$1"
    §terminal.set_command "xterm -e bash -c %@"
}

function §terminal.init {
   §terminal.set_cooked ""
   §terminal.get_command &>/dev/null
}

function §terminal.get_command {
    
    local name="$(§terminal.get_name)"
    local terminal="$(§terminal.get_terminal)"

    if [[ -n "$terminal" ]]; then
	# try to seek the terminal referenced by
	# --terminal... 
	if ! §terminals.seek "$terminal"; then
	    # not found, so we seek back to the original one
	    §terminals.seek "$name"
	fi
    fi
    
    local command="$(§_terminal.get_command)"
    local cooked="$(§terminal.get_cooked)"

    if [[ -z "$cooked" ]]; then
	if [[ "$command" =~ [^\\]%(g|f) ]]; then
            
            # replace %g and %f with geometry and font
	    local geometry="$(§terminal.get_geometry)"
	    local font="$(§terminal.get_font)"
	
	    command="$(§replace "$command" "%g" "$geometry")"
	    command="$(§replace "$command" "%f" "$font")"
	fi
	§terminal.set_cooked "$command"
	echo "$command"
    else
	echo "$cooked"
    fi
}

function §terminal.code {
    
    local name="$(§terminal.get_name)"
    local command="$(§_terminal.get_command)"
    local geometry="$(§terminal.get_geometry)"
    local font="$(§terminal.get_font)"

    echo "+terminal '$name'"
    echo "  --command '$command'"
    [[ -n "$geometry" ]] && echo "  --geometry '$geometry'"
    [[ -n "$font" ]] && echo "  --font '$font'"
    echo
}

function §terminal.binary {
    [[ "$(§terminal.get_command)" =~ ^([^\ ]+?) ]]
    echo "${BASH_REMATCH[1]}"
}

function §terminals.used {
    local used=""
    local saved="$(§terminal.get_name)"
    local binary=""

    §terminals.seek_start
    while §terminals.next?; do
	
	binary="$(§terminal.binary)"
	if [[ ! " $used " =~ $binary ]]; then
	    used="$binary $used"
	fi
	§terminals.next
    done
    §terminals.seek "$saved"
    
    echo " $used "
}

function §terminal.list {
    local opt="$1"

    if [[ "$opt" == '-l' ]]; then
	local key
	for key in ${_BASHRUN_TERMINALS_KEYS[@]}; do
	    if [[ "$key" == "command" ]]; then
		echo "$key: $(§_terminal.get_command)"
	    else
		echo "$key: $(§terminal.get $key)"
	    fi
	done;
	echo
    else
	echo $(§terminal.id)
    fi
}

