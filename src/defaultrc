###   BASHRUN_CONFIG_VERSION=0.16.0-rc1  ### -*- shell-script -*-
### DO NOT CHANGE OR MOVE THE ABOVE LINE ###

# This is the user configuration file for bashrun 0.16.0-rc1.
# Please see bashrun(1) for all the details on configuration.

+plugins terminal dropdown
# These plugins allow bashrun to be used in a regular terminal or as
# an animated dropdown terminal, e.g. use 'bashrun --mode terminal'.
# 
# See the files terminal.rc and dropdown.rc in
# /usr/share/bashrun/plugins/.  Copy these files to
# ~/.config/bashrun/plugins/ if you want to adjust them.

+configure-modes () {

    +mode bashrun
      # This is the default mode that provides a terminal in the
      # form of a run dialog. 

      --terminal "xterm -geometry %g -name bashrun-%m"
      # Specify the terminal to use for bashrun. Within this string,
      # %g expands to the first geometry given in --geometry below.
      # %m expands to the name of this mode. Bashrun expects the name
      # portion of the WM_CLASS property of the terminal window to be
      # set to "bashrun-<modename>". For xterm and the *rxvt's, the
      # "-name" option can be used for this, as seen above.  This
      # replaces the former XTERM, XTERM_OPTIONS, FGCOLOR and BGCOLOR
      # settings. 

      --geometry '40x1 40x8'
      # Set the geometry or geometries to use for the terminal
      # window. If more than one geometry is used, the cycle-size
      # action (C-l) will allow you to cycle through these geometries.
      # This replaces the former (SMALL|LARGE)_(COLUMNS|LINES)
      # settings.

      --completion 'menu-complete complete 8'
      # Set the readline completion function to use with <Tab>. The
      # first word of this string specifies the completion to use by
      # default. The second word, if given, specifies an alternative
      # completion type to use when the size of the terminal exceeds
      # the number of lines given in the third word.  This replaces
      # the former COMPLETION_TYPE, ALTERNATIVE_COMPLETION_TYPE and
      # COMPLETION_THRESHOLD settings.

      --unmap true
      # Whether to unmap the window after running a command. Setting
      # this value to "false" is equivalent to using KEEP_OPEN=yes in
      # previous versions.

      --feedback true
      # Whether to show feedback in the form of a progress bar during
      # startup.

      # --onmap 'transset-df -a 0.75' 
      ## A command to run after the window has been mapped and focused. This
      ## setting replaces the former POST_MAP_COMMAND.

      --logfile '/dev/tty9'
      # Set the logfile to redirect command output to. This replaces
      # the former LOGFILE setting.

    +mode-bashrun-init () {	
        # This fuction, if defined, will be called for the default
	# mode "bashrun" during startup. Here you may configure
	# anything that is specific to this mode only. See bashrun(1)
	# for alternatives.

	HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/bashrun/history"	
	PS1='>'

	stty -ixon    # disable flow control, allows to bind C-Q
	stty eof 0201 # prevent C-d on an empty line from exiting
    }

    # For more options and a detailed description of modes, see
    # bashrun(1)
}

+configure-terminals () {

    # Configure terminals to launch commands in. In the string given
    # by --command, %c is replaced with the actual command to run. %g
    # is replaced by the string given with --geometry. %f ist replaced
    # by the string given with --font. 
    #
    # Note that if you use %g or %f in the command string, the values
    # of --geometry and --font will be inserted into the string even
    # if they are empty, so make sure those values are defined.

    # The following two terminals are defined by default:

    +terminal default --command "xterm -e bash -c %c"
    # The default terminal to launch commands in if no other terminal
    # has been requested by an action or an action rule, see below.

    +terminal notify 
      --command "xterm -g %g -e bash -c %c"
      --geometry "40x4+0+0"

    # ^ A small terminal for notifications, used by the default actions
    # "term-notify" and "su-term-notify".

    # Here's an example of a urxvt terminal using a small font. See the
    # examples in the rules section below.

    +terminal small
      --command "urxvt -g %g -fn %f -e bash -c %c"
      --geometry "160x48"
      --font "xft:Fixed:size=10"
}

+configure-rules () {

    # Rules can be used to associate actions with specific commands or
    # commandlines. For actions that run commands in a terminal, a
    # terminal defined in the section above can also be
    # associated. The --add option adds one or more command
    # specifications to a rule, separated by whitespace.
    #
    # A command specification can be either the command name itself or
    # a regular expression that is applied to the complete
    # commandline. Both may optionally be followed by a colon,
    # followed by the name of the terminal to use.
    #
    # Regular expressions are denoted by enclosing them in '/'. Note
    # that you don't have to quote literal slashes inside the regular
    # expression, since the enclosing slashes are used solely to tell
    # bashrun that it should interpret the contents as a regular
    # expression.
    #
    # This is the equivalent of the RULES array used in previous
    # versions.
    #
    # Some examples:

    +rule term-run
      --add "watch top:small"
      # use the term-run action to always run 'watch' in the default
      # terminal and 'top' in the 'small' terminal defined above

    +rule term-page
      --add 'dict' 
      # use the term-page action to show the output of 'dict', paged
      # in the default terminal.
     
      --add '/^ls/:small'
      # use the term-page action to show the output of any commandline
      # beginning with 'ls', paged in the 'small' terminal

    +rule su-term-notify
      --add '/^/etc/rc.d/'
      # use the su-term-notify action to run any commandline beginning
      # with '/etc/rc.d' as root and show it's output in the 'notify'
      # terminal, closing the terminal after two seconds. Note that in
      # this case, the su-term-notify function already chooses to use
      # the 'notify' terminal.

    # Finally, if there is a terminal defined by the exact name of the
    # command, then that terminal is chosen automatically, e.g. if you
    # have a terminal called "alsamixer", then simply adding
    # "alsamixer" to the "term-run" rule is equivalent to adding
    # "alsamixer:alsamixer"
}

+configure-handlers () {

    +handler info
      --pattern '(.+)\?\?'
      --string '%1'
      --action show-info
      # E.g. if you type "bash??" then the string "bash" is used as
      # the commandline to be run with the show-info action, which
      # pages 'info bash' in the default terminal, unless a rule
      # indictates to run info with a different action or in a
      # specific terminal.
      
    +handler manual
      --pattern '(.+)\?'
      --string '%1'
      --action show-manual
      # Similar to the above, but shows manual pages instead. Note
      # that the order of handlers is important here: if this handler
      # were defined before the info handler, then the info handler
      # would never be reached.      

    +handler browse
      --pattern 'browse (.*)'
      --string '%1'
      --action 'browse'
      --complete 'browse'

      +handler-browse-complete () { Â§bookmarks.list; }
      # the --complete option for this handler installs a function
      # named "browse", for which the +handler-complete-browse
      # function is installed to generate the list of possible matches
      # from bashrun's own bookmarks, see below.

    +handler http
      --pattern '^(www|https?)'   
      --action browse
      # a simple url handler, for lines beginning with http, https or www

    +handler google
      --pattern '^gg:(.+)'
      --string  'www.google.com/search?q=%1'
      --action browse
      # An example of a Konqueror-style shortcut: if you type
      # "gg:foo", then the %1 in "www.google.com/search?q=%1" will be
      # replaced by foo, and the resulting url will be passed to the
      # browse action, which finally launches "$BROWSER <url>"

    +handler google-lucky
      --pattern '^ggl:(.+)'
      --string  'www.google.com/search?q=%1&btnI=I\%27m+Feeling+Lucky'
      --action browse

    +handler freshmeat-search
      --pattern '^fm:(.+)'  
      --string 'freshmeat.net/search/?q=%1&section=projects'
      --action browse

    +handler sourceforge-project
      --pattern '^sf:(.+)'  
      --string 'sourceforge.net/projects/%1/'
      --action browse
      
    +handler sourceforge-website
      --pattern '^sfw:(.+)' 
      --string '%1.sourceforge.net/'
      --action browse

    +handler aur-search
      --pattern 'aur:(.+)'
      --string  'aur.archlinux.org/packages.php?K=%1&do_Search=Go'
      --action browse

    +handler ftp
      --pattern '^ftp:(.+)' 
      --string 'ncftp %1'
      --action term-run

    +handler gimp
      --pattern '\.jpe?g$'
      --string 'f!x:gimp'

    +handler command-help
      --pattern '^\?(.+)'  
      --string '%1 --help'
      --action term-page

    +handler tlds
      --pattern '\.(org|net|com|de)$'
      --action browse

    +handler video
      --pattern '\.(avi|mpe?g|flv|mp4|wmv|mov)$'
      --string  'f:mplayer -fs'

    # The following handlers are fallback handlers, which means they
    # are guaranteed to be at the end of the handler list, and will
    # match any non-executable commandline not yet handled by a
    # previous handler. The first two of these use a file test
    # operator prepended to the handler string to check whether the
    # commandline is a path to a directory or a file,
    # respectively. See bashrun(1) for details.
    #
    # The directory handler is equivalent of the former DIRHANDLER
    # setting. The 'google-fallback' handler, if present, is
    # equivalent to using GOOGLE_FALLBACK=yes in previous versions.

    +handler directory
      --fallback 1
      --string "d:kfmclient openProfile filemanagement %1"

    +handler file
      --fallback 1
      --string "f:xdg-open %1"

    +handler google-fallback
      --fallback 1
      --string  "www.google.com/search?q=%1"
      --action browse
}

+configure-bookmarks () {

    # Add bookmarks. For each bookmark, a function by the same name is
    # defined that runs the browse action for the bookmark. This means
    # you can complete bookmarks like regular commands.
    # Alternatively, use the completing "browse" handler defined
    # above, e.g. $ browse <tab>

    +bookmark archlinux.org
    +bookmark bashrun.sourceforge.net
    +bookmark slashdot.org
    +bookmark failblog.org
    +bookmark youtube.com
    +bookmark myspace.com
}

+configure-actions () {

    # You can define and use your own actions here, as well as
    # redefine the properties and/or behavior of the default
    # actions. For details on how to write custom actions, see
    # bashrun(1).
    #
    # Some examples:
      
    +action run-as
      --description 'Run command as user (prompts for username)'
      --depends 'su'

    function +action-run-as {
	+action-run
	+user ?
    }      

    +action kill-to-xclip
      --description 'Kill whole line and copy to clipboard' 
      --depends 'xclip'

    function +action-kill-to-xclip { 
	command "echo \"$(line)\" | xclip"
	return 0
    }

    +action yank-from-xclip
      --description 'Yank clipboard contents' 
      --input no
      --depends 'xclip'
      --bash '4.1'

    function +action-yank-from-xclip {
 
	local text="$(xclip -o)"
	local size=${#text}

	local pre="${READLINE_LINE:0:$READLINE_POINT}"
	local post="${READLINE_LINE:$READLINE_POINT}"

	READLINE_LINE="$pre$text$post"

	((READLINE_POINT+=size))
	return 2
    }
}

+configure-keys () {

    # Bind keys to actions:
    # 
    # +keymap <keymap> 
    #
    #   The +keymap directive can be used to change the target keymap
    #   for subsequent +bind directives.  Possible targets are "emacs",
    #   "vi-insert" or "vi-command".
    #
    # +bind <action> <keyseq> [<keyname>]
    #
    #   Bind an <action> to a <keyseq>, optionally supplying a human
    #   readable <keyname>.

    +keymap emacs    

    +bind pass '\ew'
    +bind abort  '\C-g'
    +bind quit '\C-q'

    +bind run  '\C-m'
    +bind run  '\C-j'

    +bind term-run  '\e\C-m'
    +bind term-page '\e+'
    +bind term-hold '\eh'

    +bind su-run       '\esu'
    +bind su-term-run  '\est'
    +bind su-term-page '\es+'
    +bind su-term-hold '\esh'

    +bind show-manual  '\e?'
    +bind show-info    '\e\C-?'
    +bind show-help    '\e\C-x?'

    +bind browse         '\e\C-b'
    +bind google-search  '\e\C-g'
    +bind dict-lookup    '\e\C-d'

    +bind copy-to-clipboard '\ex'
    +bind filter-clipboard  '\ea'

    +bind bashrun-bindings '\e[11~' F1
    +bind bashrun-manual   '\e[12~' F2
    +bind debug            '\e[24~' F12

    +bind cycle-size   '\C-l'
    +bind resize-up    '\e[1;5A' C-up
    +bind resize-down  '\e[1;5B' C-down
    +bind resize-left  '\e[1;5D' C-left
    +bind resize-right '\e[1;5C' C-rght

    +bind run-as '\eu'

    +bind kill-to-xclip   '\ek'
    +bind yank-from-xclip '\ey'
}

