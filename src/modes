# -*- shell-script -*-

################################################################################

§class "§mode" "name comp unmap geom anim ps1 ps2 onmap onunmap feedback current" 'switch'

################################################################################

§function.clone "§mode.new" "§_mode.new"

BASHRUN_MODE="${BASHRUN_MODE:-launcher}"

function §mode.new { 

    §_mode.new "$1"
    §mode.set_geom "80x24"
    §mode.set_current "1"
    §mode.set_comp 'complete'
    §mode.set_unmap '0'
    §mode.set_anim '0'
    §mode.set_ps1 ""
    §mode.set_ps2 ""
    §mode.set_onmap ""
    §mode.set_onunmap ""
    §mode.set_feedback "0"
}

function §mode.multigeom? {
    [[ "$(§mode.get_geom)" =~ \  ]]
    return $?
}

function §mode.get_default_geometry {

    if [[ "$(§mode.get_geom)" =~ ([^\ ]+)\ [^\ ]+ ]]; then
	echo "${BASH_REMATCH[1]}"
    else
	§mode.get_geom
    fi
}   

function §mode.unmap? {
    [[ "$(§mode.get_unmap)" == "1" && BASHRUN_DEBUG -eq 0 ]]
    return $?
}

function §mode.switch {

    local current="$(§mode.get_name)"
    local previous="$BASHRUN_MODE"
    
    if [[ "$previous" != "$current" ]]; then
	§debug "switching from" -v "$previous" "to" -v "$current"
    fi

    if [[ "$previous" != '' && "$previous" != "$current" ]]; then
	if §function.defined? "mode-$previous-leave"; then
	    mode-$previous-leave
	fi
    fi

    # apply geometry
    §window.geometry "$(§mode.get_default_geometry)" 

    if §function.defined?  "mode-$current-enter"; then
	mode-$current-enter
    fi
    
    # enable animation
    if [[ "$(§mode.get_anim)" == "1" ]]; then
	§window.animate 1
    else
	§window.animate 0
    fi
    tput cr; tput dl1
    
    local ps1="$(§mode.get_ps1)"
    local ps2="$(§mode.get_ps2)"

    [[ -n "$ps1" ]] && PS1="$ps1"
    [[ -n "$ps2" ]] && PS2="$ps2"

    BASHRUN_MODE="$current"
    §registry.set_mode "$previous" "$current"

    xdotool set_window $BASHRUN_WINDOW_ID \
	--name "bashrun-$current" \
	--classname "bashrun-$current"
}

function §mode.reset {
    
    local name="$(§mode.get_name)"
    if [[ "$(type -t mode-$name-leave)" == "function" ]]; then
	mode-$name-leave
    fi
}

function §mode.code {

    local name="$(§mode.get_name)"
    local comp="$(§mode.get_comp)"
    local unmap="$(§mode.get_unmap)"
    local geom="$(§mode.get_geom)"
    local anim="$(§mode.get_anim)"
    local ps1="$(§mode.get_ps1)"
    local ps2="$(§mode.get_ps2)"
    local onmap="$(§mode.get_onmap)"
    local onunmap="$(§mode.get_onunmap)"
    local feedback="$(§mode.get_feedback)"

    §print_line "mode $name" "#" "80"
    echo

    echo "+mode '$name'"
    [[ "$geom" != '80x24' ]] && echo "  --geom  '$geom'"
    [[ "$comp" != 'complete' ]] && echo "  --comp  '$comp'"
    [[ "$unmap" != '0' ]] && echo "  --unmap '$unmap'"
    [[ "$anim" != '0' ]] && echo "  --anim  '$anim'"
    [[ "$ps1" != '' ]] && echo "  --ps1   '$ps1'"
    [[ "$ps2" != '' ]] && echo "  --ps2   '$ps2'"
    [[ "$onmap" != '' ]] && echo "  --onmap   '$onmap'"
    [[ "$onunmap" != '' ]] && echo "  --onunmap   '$onunmap'"
    [[ "$feedback" != '0' ]] && echo "  --feedback   '$feedback'"
    echo

    if §function.defined? "mode-$name-enter"; then
	§function.code "mode-$name-enter"
	echo
    fi

    if §function.defined? "mode-$name-leave"; then
	§function.code "mode-$name-leave"
	echo
    fi      
}

§function.clone "§modes.dump" "§_modes.dump"

function §modes.dump {

    local file=$_OBJECTS_DATA_HOME/§modes.dump
    local mode=''
    local func=''
    local current=$(§mode.get_name)

    §_modes.dump

    §modes.seek_start
    while §modes.next?; do
	mode=$(§mode.get_name)

	func="mode-$mode-enter"
	if §function.defined? "$func"; then
	    §function.code "$func" >> $file
	fi

	func="mode-$mode-leave"
	if §function.defined? "$func"; then
	    §function.code "$func" >> $file
	fi
	§modes.next
    done
    §modes.seek $current
}
