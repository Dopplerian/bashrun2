# -*- shell-script -*-

################################################################################

BASHRUN_PROGRESS_PERCENT=0
BASHRUN_PROGRESS_TASK="Busy"
BASHRUN_PROGRESS_LINE=""

function §progress.enabled? {
    [[ BASHRUN_DEBUG -eq 0 && BASHRUN_FEEDBACK -eq 1 && §window.terminal? ]]
}

§progress.new () {
    BASHRUN_PROGRESS_TASK="${1:-Progress}"
    BASHRUN_PROGRESS_PERCENT=${2:-0}

    §progress.enabled? && tput civis
    §progress.update "$BASHRUN_PROGRESS_PERCENT"
}

§progress.update () {

    local value="$1"
    if [[ "${value:0:1}" == "+" ]]; then
	((BASHRUN_PROGRESS_PERCENT+=${value:1}))
    else
	BASHRUN_PROGRESS_PERCENT="$value"
    fi

    if [[ $# -eq 2 ]]; then
	BASHRUN_PROGRESS_TASK="$2"
    fi
    §progress.update_line
    §progress.draw
}

§progress.update_line () {

    local i=0
    BASHRUN_PROGRESS_LINE="$BASHRUN_PROGRESS_TASK"
    for ((i=0; i<$COLUMNS-${#BASHRUN_PROGRESS_TASK}-${#BASHRUN_PROGRESS_PERCENT}-4; i++)); do
	BASHRUN_PROGRESS_LINE="$BASHRUN_PROGRESS_LINE "
    done
    BASHRUN_PROGRESS_LINE="$BASHRUN_PROGRESS_LINE [$BASHRUN_PROGRESS_PERCENT%]"
}

§progress.draw () {

    §progress.enabled? || return

    local l="$(echo "scale=2; $COLUMNS * (${BASHRUN_PROGRESS_PERCENT}.0 / 100.0)" | bc -q | cut -d. -f1)"
    local i=0
    local char=""
    echo -ne '\e[0G'
    echo -ne '\e[1m'
    for ((i=0; i<${#BASHRUN_PROGRESS_LINE}; i++)); do
	if [[ i -lt l ]]; then	    
	    echo -ne '\e[33m'
	    echo -ne '\e[44m'
	else
	    echo -ne '\e[34m'
	    echo -ne '\e[40m'
	fi
	echo -n "${BASHRUN_PROGRESS_LINE:$i:1}"
    done
}
    
§progress.reset () {

    BASHRUN_PROGRESS_PERCENT=0
    BASHRUN_PROGRESS_TASK="Busy"

    echo -ne '\e[0m'
    §progress.enabled? && tput reset
}

§progress.destroy () {
   
    unset BASHRUN_PROGRESS_PERCENT BASHRUN_PROGRESS_TASK BASHRUN_PROGRESS_LINE
    unset -f \
	§progress.enabled? \
	§progress.new \
	§progress.update \
	§progress.update_line \
	§progress.draw \
	§progress.reset \
	§progress.destroy
}
