# -*- shell-script -*-

################################################################################

§class §config "type names"

################################################################################

function §config.add_name () {
    local name="$1"
    if [[ "$(§config.get_names)" == "" ]]; then
	§config.set_names "$name"
    else
	§config.set_names "$(§config.get_names) $name"
    fi
}

function §configs.list () {

    §configs.seek_start
    while §configs.next?; do
	echo "$(§config.get_type) ($(§config.get_names))"
	§configs.next
    done
}

function §config.get_dumpname { # $wanted

    local wanted="$1"
    local dump="$(§config.get_type)"
    local name=""
    
    for name in $(§config.get_names); do	
	dump="$dump-$name"
	[[ "$name" == "$wanted" ]] && break
    done
    echo "$dump.dump"
}

function §config.get_final_dumpname {
    [[ "§(config.get_names)" =~ ([^\ ])$ ]]
    echo "$(§config.get_dumpname "${BASH_REMATCH[1]}")"
}

function §config.get_rcname { # $wanted

    local wanted="$1"
    local dump="$(§config.get_type)"
    local name=""
    
    for name in $(§config.get_names); do	
	dump="$dump-$name"
	[[ "$name" == "$wanted" ]] && break
    done

    echo "$dump.rc"
}

function §config.changed? { # $name

    local name="$1"
    local state="$2"
    local rcfile="$BASHRUN_CACHE_HOME/$(§config.get_rcname "$name")"
    local function="$(§config.get_funcname "$name")"

    if [[ "$state" == "reconfiguring" ]]; then
	return 0

    elif [[ ! -f $rcfile ]]; then
	return 0    

    elif [[ "$(<$rcfile)" != "$(§function.code "$function")" ]]; then
	return 0
    fi
    return 1
}

function §config.get_funcname { # $wanted
    local name="$1"
    if [[ "$name" == "user" ]]; then
	echo "+configure-$(§config.get_type)"
    else
	echo "+configure-$name-$(§config.get_type)"
    fi
}

function §configs.restore {

    §configs.restore_core
    §configs.collect_user_configs

    §configs.seek_start
    while §configs.next?; do
	§config.restore
	§configs.next
    done
}

function §config.restore {

    local type="$(§config.get_type)"
    local restore="$(§config.get_dumpname core)"
    local state="restoring"
    local name=""

    §progress.update +12 "Initializing... [$type]"

    for name in $(§config.get_names); do
	[[ "$name" == "core" ]] && continue

	if §config.changed? "$name" "$state"; then

	    §debug -y "$(§config.get_funcname "$name")" "->" -c "reconfigure..."

	    # restore the previous dump unless reconfiguring	    
	    if [[ "$state" == "restoring" ]]; then
		§debug "restoring " -v "$restore"
		. "$BASHRUN_CACHE_HOME/$restore"
	    fi

	    state="reconfiguring" # we're reconfiguring from now on...

	    # run the config function for this part
	    §debug "calling " -v "$(§config.get_funcname "$name")"

	    $(§config.get_funcname "$name")

	    # dump the results in the proper dumpfile
	    §debug "dumping" -v "$(§config.get_dumpname "$name")"

	    §$type.dump "$(§config.get_dumpname "$name")"

	    # cache the config function in the proper rcfile
	    §debug "caching" -v "$(§config.get_rcname "$name")"

	    §function.code "$(§config.get_funcname "$name")" > \
		$BASHRUN_CACHE_HOME/$(§config.get_rcname "$name")
	
	else
	    §debug -y "$(§config.get_funcname "$name")" "->" -c "restore..."
	fi
	restore="$(§config.get_dumpname "$name")"
    done
    
    if [[ "$state" == "restoring" ]]; then
	§debug -c "restore" -v "$(§config.get_final_dumpname)"
	. "$BASHRUN_CACHE_HOME/$(§config.get_final_dumpname)"
    fi	    
}

function §configs.restore_core {

    source $BASHRUN_SHARE/defaults
    source $BASHRUN_RCFILE

    local types="actions|modes|terminals|rules|handlers|keys"
    local functions="$(declare -f | grep '^+configure-' | awk '{ print $1 }')"

    local line function name type dumpfile

    §progress.update +5 "Initializing... [core]"

    for function in $functions; do
	if [[ "$function" =~ ^\+configure-core-(.+) ]]; then

	    type="${BASH_REMATCH[1]}"
	    dumpfile="$type-core.dump"	    

	    if [[ ! -f $BASHRUN_CACHE_HOME/$dumpfile ]]; then
		§debug -y "core" -c "$type" "->" -v "$dumpfile"
		$function
		§$type.dump $dumpfile
	    fi

	    if ! §configs.seek "$type"; then
		§config.new "$type"
	    fi
	    §configs.seek "$type"
	    §config.add_name "core"
	fi
    done
}

function §configs.collect_user_configs {

    source $BASHRUN_SHARE/defaults
    source $BASHRUN_RCFILE

    local types="actions|modes|terminals|rules|handlers|keys"
    local functions="$(declare -f | grep '^+configure-' | awk '{ print $1 }')"

    local line function name type

    # then we'll process the user config functions
    for function in $(declare -f | grep '^+configure'); do

	# parse the function name to determine the identifier, the name and the type
	[[ "$function" =~ ^(\+configure-([^-]+?)?-?($types)) ]] || continue

	function="${BASH_REMATCH[1]}"
	type="${BASH_REMATCH[3]}"
	name="${BASH_REMATCH[2]:-user}"

	[[ "$name" == "core" ]] && continue

	if ! §configs.seek "$type"; then
	    §config.new "$type"
	fi
	§configs.seek "$type"
	§config.add_name "$name"
    done   
}

