# -*- shell-script -*-

################################################################################

function bashrun.configure {

    local rcfile="${BASHRUN_RCFILE/$HOME/~}"

    source $BASHRUN_SHARE/defaults
    source $BASHRUN_RCFILE

    local line=""
    local type=""

    bashrun.separator "source $rcfile"

    # core actions need to be sourced first and only need to be cached
    # once since they're considered immutable
    bashrun.debug "installing" -v "core actions"

    progress.update +10 "Initializing... [core]"
    if [[ ! -f $BASHRUN_CACHE_HOME/§defaults.dump ]]; then
	configure-defaults
	§actions.dump "§defaults.dump"
    else
	source $BASHRUN_CACHE_HOME/§defaults.dump
    fi
    unset -f configure-defaults

    # loop through defined configure-* functions

    for line in $(set | grep ^configure-); do
	[[ "$line" == "()" ]] && continue

	[[ "$line" =~ ^configure-(.+) ]]
	type="§${BASH_REMATCH[1]}"

	[[ "$type" == "§defaults" ]] && continue;

	progress.update +10 "Initializing... [${type//§/}]"

	local len=${#type}
	if [[ "$(objects.types)" =~ "${type:0:$len-1} " ]]; then
	    bashrun.configure.type $type
	else
	    if [[ "$type" == "§keys" ]]; then
		bashrun.configure.keys
	    else
		bashrun.debug warn -v $type ": unknown object type, skipping configure-${type//§/}()"
	    fi
	fi
	unset -f configure-${type//§/}
    done
}

function bashrun.configure.type {
    
    local type="$1"
    local dump="${2:-$BASHRUN_CACHE_HOME/$type.dump}"
    local dumprc="${3:-$BASHRUN_CACHE_HOME/$type.rc}"

    local config="configure-$type"
    config=${config//§/}

    # if a dump exists
    if [[ -f "$dump" ]]; then

	# if the configure function has changed
	if [[ "$(<$dumprc)" != "$(function_code $config)" ]]; then

	    # reconfigure this type
	    bashrun.reconfigure.type "$type", "$config", "$dumprc"
	else
	    # restore type
	    bashrun.debug "restoring" -v "$type"
	    $type.restore
	fi
    else
	# reconfigure this type
	bashrun.reconfigure.type "$type", "$config", "$dumprc"
    fi
}

function bashrun.reconfigure.type {

    bashrun.debug -v "$type"

    # run configure function
    $config
    
    # dump configuration results
    $type.dump
    
    # cache the configure function that created the dump
    function_code configure-${type//§/} > $dumprc
}

function bashrun.configure.keys {

    local dumprc="$BASHRUN_CACHE_HOME/§keys.rc"

    # dumps already exists by now (created by §action.dump)

    # if no dumprc exists, configure-keys() has not been used before...
    if [[ ! -f "$dumprc" ]]; then
	touch "$dumprc"
    fi

    # if the configure-keys function has changed or the actions have been
    # reconfigured before (and in that case don't include these bindings yet)...

    if [[ "$(<$dumprc)" != "$(function_code configure-keys)" ]]; then	

	bashrun.debug "reconfiguring" -v "§keys"

	# run configure function
	configure-keys

	# dump bindings (et al) again
	§internals.dump
	§bindings.dump
	§keynames.dump

        # cache the configure function that created the dump
	function_code configure-keys > $dumprc
    else
	bashrun.debug "restoring" -v "§keys"

	§internals.restore
	§keynames.restore
	§bindings.restore
    fi
}
