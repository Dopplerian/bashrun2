# -*- shell-script -*-

############################################################

. $BASHRUN_SHARE/utils
. $BASHRUN_SHARE/globals
. $BASHRUN_SHARE/config
. $BASHRUN_SHARE/geometry
. $BASHRUN_SHARE/registry
. $BASHRUN_SHARE/progress
. $BASHRUN_SHARE/terminals
. $BASHRUN_SHARE/window
. $BASHRUN_SHARE/modes
. $BASHRUN_RCFILE

# load modes and terminals 
§configs.restore_core 
§configs.collect_user_configs
§configs.seek "modes" && §config.restore 
§configs.seek "terminals" && §config.restore 

############################################################

launch () {

    # get the bashrun terminal
    §terminals.seek "bashrun"
    
    # get requested mode
    if ! §modes.seek "$mode"; then
	mode="launcher"
	§modes.seek $mode
    fi

    # find out whether this mode has feedback enabled
    feedback="$(§mode.get_feedback)"

    # find out whether it's animated
    animation="$(§mode.get_anim)"

    # get command and insert properties and geometry from requested mode
    geometry=$(§mode.get_default_geometry)
    §geometry.parse $geometry

    if [[ animation -eq 1 ]]; then
	# start with a one line terminal
	§geometry.height 1
	geometry="$(§geometry)"
    fi

    terminal="$(§terminal.get_command)"

    terminal=${terminal//%m/$mode}
    terminal=${terminal//%g/$geometry}        

    # launch terminal
    BASHRUN=1 \
	BASHRUN_MODE="$mode" \
	BASHRUN_FEEDBACK="$feedback" \
	BASHRUN_DEBUG=$BASHRUN_DEBUG \
	$terminal $termopts &    

    local wid=""
    wid="$(waitwid)"

    §window.id "$wid"

    # map the window to make it expand if animated
    §window.map    

    echo "$wid"
}

function waitwid { 
   # wait until new instance is registered and return it's wid
    
    local attempts=50
    local widfile="$BASHRUN_CACHE_HOME/$mode"

    until [[ -f $BASHRUN_CACHE_HOME/$mode ]]; do
	if [[ attempts -eq 0 ]]; then
	    echo "failed"
	    exit 1
	fi
	((attempts-=1))
	sleep 0.1
    done
    echo "$(<$widfile)" 
}

