#!/bin/bash
######################################################################
#
# bashrun 1.0.0-rc1 -- X11 application launcher based on bash
# Copyright (C) 2010 Henning Bekel <h.bekel@googlemail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
######################################################################

# if no arguments are given, attempt to map an existing launcher as
# fast as possible
if [[ $# -eq 0 ]]; then    

    widfile="${XDG_CACHE_HOME:-$HOME/.cache}/bashrun/launcher-wid"
    if [[ -f "$widfile" ]]; then
	wid="$(<$widfile)"
	xdotool windowmap "$wid"
	xdotool windowfocus "$wid"

	resetflag="${XDG_CACHE_HOME:-$HOME/.cache}/bashrun/launcher-reset"
	if [[ -f "$resetflag" ]]; then
	    xdotool key --clearmodifiers Return
	fi
	exit 0
    fi
fi
# no existing instance or xdotool is missing -> proceed...

# determine the install location
BASHRUN_PREFIX=`type -p bashrun 2> /dev/null`
BASHRUN_PREFIX=${BASHRUN_PREFIX/\/bin\/bashrun/}

# setup bashrun directories
BASHRUN_SHARE=$BASHRUN_PREFIX/share/bashrun
BASHRUN_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}/bashrun
BASHRUN_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}/bashrun
BASHRUN_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}/bashrun
BASHRUN_RCFILE=$BASHRUN_CONFIG_HOME/rc

# set defaults for debug and feedback env vars
BASHRUN_DEBUG=${BASHRUN_DEBUG:-0}
BASHRUN_FEEDBACK=${BASHRUN_FEEDBACK:-0}

# default mode and command
mode="${BASHRUN_MODE:-launcher}"
command="show"

# load frontend functions
source $BASHRUN_SHARE/frontend

# handle --version, --help and --mode options first
if [[ $# -gt 0 ]]; then
    case "$1" in
	-v|--version)
 	    version && exit 0
 	    ;;
	-h|--help)
 	    usage && exit 0
 	    ;;    
	-m|--mode)
 	    mode=${2:-launcher}
 	    shift; shift
 	    ;;
	-d|--debug)
	    BASHRUN_DEBUG=1
	    shift
	    ;;
    esac
fi

# bootstrap and get info about the current mode
MODEINFO="$BASHRUN_CACHE_HOME/${mode}-info"
[[ ! -f $MODEINFO ]] && bootstrap
source $MODEINFO

# get command argument
if [[ $# -gt 0 ]]; then
    command="$1"
    command=${command/--/}
    shift
fi

# launch a new instance if necessary

launched=0
if [[ ! "$(xprop -id $wid WM_CLASS 2>/dev/null)" =~ bashrun-$mode ]]; then
    if [[ "$command" =~ ^(exit|quit)$ ]]; then
	exit 0
    elif [[ "$command" =~ ^(w|p)id$ ]]; then
	exit 1
    else
	launch
	launched=1
    fi
fi

# prepare §window class if necessary
[[ launched -eq 0 ]] && source_window

# handle command
case "$command" in
    show)
	§window.map fast # &>/dev/null
	;;
    hide)
	§window.unmap fast &>/dev/null
	;;	
    toggle)
	[[ launched -eq 0 ]] && §window.toggle fast &>/dev/null
	;;
    smart)
	[[ launched -eq 0 ]] && §window.toggle_smart fast 1 &>/dev/null
	;;
    wid)
	echo $wid
	;;
    pid)
	echo $pid
	;;
    exit|quit)
	kill $pid
	;;
    restart)
	if [[ launched -eq 0 ]]; then
	    kill $pid
	    sleep 1
	    export BASHRUN_DEBUG
	    exec bashrun -m $mode	
	fi
	;;
    su)
	remote su-run $@
	;;
    do)
	remote $@
	;;
    wait)
	state=${1:-unmapped}
	case "$state" in
	    ready)
		wait_until "[[ -f $BASHRUN_CACHE_HOME/${mode}-ready ]]"
		;;
	    mapped|unmapped)
		§window.wait $state
		;;	    
	esac
	;;
    *)
	echo "bashrun: unknown command: $command"
	exit 1
esac 
exit 0
