#!/bin/bash
######################################################################
#
# Bashrun 1.0.0rc1 -- X11 application launcher based on bash
# Copyright (C) 2010 Henning Bekel <h.bekel@googlemail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
######################################################################

# if no arguments are given, attempt to map an existing launcher as
# fast as possible first...
if [[ $# -eq 0 ]]; then    
    widfile="${XDG_CACHE_HOME:-$HOME/.cache}/bashrun/launcher-wid"
    [[ -f "$widfile" ]] && brwctl "$(<$widfile)" show
fi

# setup global variables
source __PREFIX__/share/bashrun/globals

# check if another frontend process is currently running
lock="$bashrun_cache_home/bashrun.lck"
if [[ -f "$lock" ]]; then
    echo "bashrun: locked: $bashrun_cache_home/bashrun.lck exists." >&2
    exit 1
fi

# no other process, so take the lock
touch "$lock"

# remove lock on exit or term
trap '[[ -f "$lock" ]] && rm "$lock"' EXIT
trap '[[ -f "$lock" ]] && rm "$lock"' TERM

# bootstrap if cache home doesn't exist
if [[ ! -e $bashrun_cache_home ]]; then
    source $bashrun_site/bootstrap
fi

# set default mode and command
mode="launcher"
command="show"

# load frontend functions
source $bashrun_site/frontend

# handle options first
until [[ "$1" == "--" || "${1:0:1}" != '-' ]]; do
    case "$1" in
	-v|--version)
 	    version && exit 0
 	    ;;
	-h|--help)
 	    usage && exit 0
 	    ;;    
	-m|--mode)
 	    mode="$2"
 	    shift; shift
 	    ;;
	-d|--debug)
	    BASHRUN_DEBUG=1
	    shift
	    [[ $# -eq 0 ]] && command="debug"
	    ;;
	--remote-control)
	    remote_control_code
	    exit 0
	    ;;	
    esac
done

# get info about the current mode
modeinfo="$bashrun_cache_home/${mode}-info"
[[ ! -f $modeinfo ]] && create_modeinfo
source $modeinfo

# get command argument, if any
if [[ $# -gt 0 && "$1" != "--" ]]; then
    command="$1"
    command=${command/--/}
    shift
fi

# get arguments and possible terminal options (after "--")
declare -a args
termopts=""

if [[ $# -gt 0 ]]; then
    target="args"    
    for arg in "$@"; do

	if [[ "$arg" == "--" ]]; then
	    target="term"
	    continue
	fi

	if [[ "$target" == "args" ]]; then
	    args[${#args[@]}]="$arg"
	else
	    termopts+=" $arg"
	fi
    done
    termopts=${termopts/ /}
fi

# launch a new instance if necessary

launched=0
if [[ ! "$(brwctl $wid class? 2>/dev/null)" =~ bashrun-$mode ]]; then

    # don't launch a new instance for these commands:
    if [[ "$command" =~ ^(exit|quit|wid|pid)$ ]]; then
	exit 1
    else
	launch
	launched=1
	# don't apply these commands on a fresh instance:
	if [[ "$command" =~ ^(show|toggle|smart|reload|restart|debug)$ ]]; then
	    exit 0
	fi
    fi
fi

# prepare §window class if necessary
[[ launched -eq 0 ]] && source_window

# handle command
case "$command" in
    show)
	§window.map &>/dev/null
	;;
    hide)
	§window.unmap &>/dev/null
	;;	
    toggle)
	§window.toggle &>/dev/null
	;;
    smart)
	§window.toggle_smart &>/dev/null
	;;
    wid)
	echo $wid
	;;
    pid)
	echo $pid
	;;
    su)
	if [[ ${#args[@]} -gt 0 ]]; then
	    remote su-run ${args[@]}
	else
	    echo "bashrun: error: command \`su' requires at least " \
		"one argument: <cmd>" >&2
	    exit 1
	fi
	;;
    do)
	if [[ ${#args[@]} -gt 0 ]]; then
	    remote ${args[@]}
	else
	    echo "bashrun: error: command \`do' requires at least " \
		"one argument: <action> [<cmd>]" >&2
	    exit 1
	fi
	;;
    reload)
	remote reload
	;;
    restart)
	remote quit
	sleep 1
	export BASHRUN_DEBUG
	rm "$lock" &>/dev/null
	exec bashrun -m $mode	
	;;
    debug)
	remote debug
	§window.map &>/dev/null
	;;
    exit|quit)
	remote quit
	;;    
    *)
	echo "bashrun: unknown command: $command"
	exit 1
esac 
exit 0
