# -*- shell-script -*-

################################################################################

_OBJECTS_CACHE_HOME='/tmp'
_OBJECTS_DATA_HOME='/tmp'
_OBJECTS_NAMESPACE='boop'

_OBJECTS_TYPES=''
_OBJECTS_FOCUS=''

function objects.cache_home {
    
    local cache_home=$1
    if [[ "$cache_home" == '' ]]; then
	echo "$_OBJECTS_CACHE_HOME"
    else
	_OBJECTS_CACHE_HOME="$cache_home"
    fi
}

function objects.data_home {
    
    local data_home=$1
    if [[ "$data_home" == '' ]]; then
	echo "$_OBJECTS_DATA_HOME"
    else
	_OBJECTS_DATA_HOME="$data_home"
    fi
}

function objects.namespace {
    
    local namespace=$1
    if [[ "$namespace" == '' ]]; then
	echo "$_OBJECTS_NAMESPACE"
    else
	_OBJECTS_NAMESPACE="$namespace"
    fi
}

function objects.types {    
    echo "$_OBJECTS_TYPES"
}

function objects.focus {
    
    local type=$1
    if [[ "$type" == '' ]]; then
	echo "$_OBJECTS_FOCUS"
    else
	_OBJECTS_FOCUS="$type"
    fi
}

function objects.seek_start {
    local type=""
    for type in $_OBJECTS_TYPES; do
	${type}s.seek_start
    done
}

function class {

    # create object from 'objects' template

    local name=$1
    local keys=$2
    local methods="nil"
    local have_interface=0
    
    _OBJECTS_TYPES="$_OBJECTS_TYPES $name"
    if [[ "${_OBJECTS_TYPES:0:1}" == ' ' ]]; then
	_OBJECTS_TYPES="${_OBJECTS_TYPES:1}"
    fi

    if [[ "$#" == "3" ]]; then 
	methods=${3}
    fi

    if [[ "$methods" != 'nil' ]]; then
	local interface=(new code $keys $methods)
	have_interface=1
        # prepare interface (prefix with --)

	local i=0
	for ((i=0; i<${#interface[@]}; i++)); do
	    interface[$i]="--${interface[$i]}"
	done
	interface="${interface[@]}"
    fi

    local tmpfile=$_OBJECTS_CACHE_HOME/$name.bash

    if [[ -f $tmpfile ]]; then
	source $tmpfile
	return 0
    fi

    local NAME="$(objects.namespace)_$name"
    NAME=$(echo $NAME | tr "[:lower:]" "[:upper:]")

    cat $BASHRUN_SHARE/object | \
	sed "s|_OBJECTS_KEYS=()|_OBJECTS_KEYS=($keys)|" | \
	sed "s|_OBJECTS_INTERFACE_OPTIONS=''|_OBJECTS_INTERFACE_OPTIONS='$interface' |" | \
	sed "s|_OBJECTS_HAVE_INTERFACE=0|_OBJECTS_HAVE_INTERFACE=$have_interface|" | \
	sed "s|_OBJECTS_INTERFACE_METHODS=''|_OBJECTS_INTERFACE_METHODS='$methods'|" | \
	sed "s|object|$name|g;s|OBJECT|$NAME|g;" | \
	sed "s|ObJeCt|OBJECT|g;s|oBjEcT|object|g" \
	> $tmpfile

    local i=0
    local key
    for key in $keys; do
	object.create_accessors $name $NAME $key $i
	let i++
    done
    
    source $tmpfile

    return 0
}

function objects.list {
    ${_OBJECTS_FOCUS}s.list 
}

function objects.dump {
    local type=""
    for type in $_OBJECTS_TYPES; do
	eval "${type}s.dump"
    done
}

function objects.restore {
    local type=""
    for type in $_OBJECTS_TYPES; do
	eval "${type}s.restore"
    done
}

function objects.clear {
    local type=""
    for type in $_OBJECTS_TYPES; do
	eval "${type}s.clear"
    done
}

function object.create_reader {
    local name=$1
    local NAME=$2
    local key=$3
    local field=$4
    local tmpfile=$_OBJECTS_CACHE_HOME/$name.bash

    echo $(cat <<EOF

function ${name}.get_${key} {
    echo "\${_${NAME}S[\$_${NAME}S_POSITION+$field]}";
}
EOF
    ) >> $tmpfile
}

function object.create_writer {
    local name=$1
    local NAME=$2
    local key=$3
    local field=$4
    local tmpfile=$_OBJECTS_CACHE_HOME/$name.bash

    echo $(cat <<EOF

function ${name}.set_${key} {
    _${NAME}S[\$_${NAME}S_POSITION+$field]=\$1;
    _${NAME}S_MODIFIED=1;
}
EOF
    ) >> $tmpfile
}

function object.create_accessors {
    object.create_reader "$@"
    object.create_writer "$@"
}

function objects.complete_id {

    local cur prev opts
    COMPREPLY=()
    
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="$($(objects.focus)s.all)"
    
    if [[ ${cur} == * ]]; then
	COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
    fi
    return 0
}

function objects.complete_type {

    local cur prev opts
    COMPREPLY=()
    
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    local type
    for type in $(objects.types); do
	if ${type}s.interface?; then
	    opts="$opts $type"
	fi
    done
    if [[ ${cur} == * ]]; then
	COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
    fi
    return 0
}

# utility functions

function function_code {
    echo "$(type $1 | sed '1 d')"
}

function function_clone {

    local function="$1"
    local newname="$2"

    if $(type -t $function &> /dev/null); then
	local code="$(echo -n '#'; type $function)"
	code="${code/$function \(\)/$newname ()}"
	eval "$code"
    else
	echo "function_clone: error: no such function: $function"
    fi
}

function defined? {
    [[ "${!1-X}" == "${!1-Y}" ]]
}

