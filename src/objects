# -*- shell-script -*-

################################################################################
#
# Set up a "hash of hashes" and allow access to objects OOP-Style
#

# "class variables" ############################################################

_OBJECTS=()
_OBJECTS_KEYS=()
_OBJECTS_WIDTH=${#_OBJECTS_KEYS[@]}
_OBJECTS_POSITION=0
_OBJECTS_SIZE=0
_OBJECTS_MODIFIED=0

# "class methods" (seeking to, matching and iterating objects) #################

function objects_seek { # args
    
    local matched=0
    local i=0
    local k=0

    for ((i=0; i<=${#_OBJECTS[@]}; i+=${#_OBJECTS_KEYS[@]})); do
	matched=0
	if [[ "${_OBJECTS[$i]}" == "$1" ]]; then
	    matched=1
	    if [[ $# -eq 2 ]]; then
		if [[ "${_OBJECTS[$i+1]}" == "$2" ]]; then
		    matched=1
		else
		    matched=0		    
		fi
	    fi		
	fi

	if [[ matched -eq 1 ]]; then
	    _OBJECTS_POSITION=$i
	    break
	fi
    done
    
    [[ matched -eq 0 ]] && return 1
    [[ matched -eq 1 ]] && return 0
}

function objects_seek_start {
    _OBJECTS_POSITION=0
}

function objects_seek_end {
    (( _OBJECTS_POSITION = (_OBJECTS_SIZE-1) * _OBJECTS_WIDTH ))
}

function objects_have_next {
    [[ $_OBJECTS_POSITION+$_OBJECTS_WIDTH -le ${#_OBJECTS[@]} ]] && return 0
    return 1
}

function objects_current {
    echo "${_OBJECTS[$_OBJECTS_POSITION]}"
}

function objects_next {
    (( _OBJECTS_POSITION += _OBJECTS_WIDTH ))
}

function objects_have_previous {
    [[ $_OBJECTS_POSITION+1 -ge 0 ]] && return 0
    _OBJECTS_POSITION=0
    return 1
}

function objects_previous {
    (( _OBJECTS_POSITION -= _OBJECTS_WIDTH ))
}

function objects_select { # key value [which=0]-> "id1 id2..."

    local key=$1
    local wanted=$2
    local which=${3:-1} # 0: any, 1: all
    local value=''
    local ids=''
    local i=0
    local saved=${_OBJECTS[$_OBJECTS_POSITION]}

    for ((i=0; i<=${#_OBJECTS[@]}; i+=${#_OBJECTS_KEYS[@]})); do
	_OBJECTS_POSITION=$i
	
	value=$(object_get $key)
	    if [[ "$value" == "$wanted" ]]; then
		ids="$ids ${_OBJECTS[$i]}"
		[[ which -eq 0 ]] && break
	    fi
    done
    objects_seek $saved

    echo "$ids"
}

function objects_modified? {

    [[ _OBJECTS_MODIFIED -eq 0 ]] && return 1
    [[ _OBJECTS_MODIFIED -eq 1 ]] && return 0
}

function objects_modified { # value
    _OBJECTS_MODIFIED=$1
}

function objects_list { # [ids]

    local saved=${_OBJECTS[$_OBJECTS_POSITION]}

    if [[ $1 != '' ]]; then
	for id in $@; do
	    if objects_seek $id; then
		object_list $id
	    fi
	done
    else
	objects_seek_start
	while objects_have_next; do
	    object_list
	    objects_next
	done
    fi
    objects_seek $saved
}

# "instance methods" (always operate on the object at the current position) ####

function object_new {
    local i
    
    for ((i=1; i<=${#_OBJECTS_KEYS[@]}; i++)); do
	_OBJECTS[${#_OBJECTS[@]}]=${!i}
    done
    (( _OBJECTS_SIZE+=1 ))
    _OBJECTS_MODIFIED=1
    objects_seek $1
}

function object_get { # key -> "value"
    local key=$1
    local index=-1
    local i=0
 
    for ((i=0; i<=${#_OBJECTS_KEYS[@]}; i++)); do
	if [[ ${_OBJECTS_KEYS[$i]} == $key ]]; then
	    index=$i
	    break
	fi
    done

    if [[ index -ge 0 ]]; then 
	echo "${_OBJECTS[$_OBJECTS_POSITION+$index]}"
    fi
}

function object_set { # key value

    local key=$1
    local value=$2
    local index=-1
    local i=0

    for ((i=0; i<=${#_OBJECTS_KEYS[@]}; i++)); do
	if [[ ${_OBJECTS_KEYS[$i]} == $key ]]; then
	    index=$i
	    break
	fi
    done

    if [[ index -ge 0 ]]; then 
	_OBJECTS[$_OBJECTS_POSITION+$index]=$value
	_OBJECTS_MODIFIED=1
    fi
}

function object_list {
    local key
    for key in ${_OBJECTS_KEYS[@]}; do
	echo "$key: $(object_get $key)"
    done;
    echo
}

# "instance accessor methods" (generated by mkobject) ###########

