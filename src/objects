# -*- shell-script -*-

################################################################################

_objects_cache_home='/tmp'
_objects_data_home='/tmp'
_objects_namespace='boop'
_objects_site="."

_objects_types=''
_objects_focus=''

function §objects.site {
    
    if [[ $# -eq 0 ]]; then
	echo "$_objects_site"
    else
	_objects_site="$1"
    fi
}

function §objects.cache_home {
    
    if [[ $# -eq 0 ]]; then
	echo "$_objects_cache_home"
    else
	_objects_cache_home="$1"
    fi
}

function §objects.data_home {
    
    if [[ $# -eq 0 ]]; then
	echo "$_objects_data_home"
    else
	_objects_data_home="$1"
    fi
}

function §objects.namespace {
    
    if [[ $# -eq 0 ]]; then
	echo "$_objects_namespace"
    else
	_objects_namespace="$1"
    fi
}

function §objects.types {    
    echo " $_objects_types "
}

function §objects.focus {
    
    if [[ $# -eq 0 ]]; then
	echo "$_objects_focus"
    else
	_objects_focus="$1"
    fi
}

function §objects.seek_start {
    local type=""
    for type in $_objects_types; do
	§${type}s.seek_start
    done    
}

function §class {

    # create object from 'objects' template

    local name="$1"
    local keys="$2"
    local key=''
    local clean_keys=""
    local methods="nil"
    local have_interface=0
    
    # register object type
    _objects_types="$_objects_types $name"
    if [[ "${_objects_types:0:1}" == ' ' ]]; then
	_objects_types="${_objects_types:1}"
    fi

    # interface and additional interfaced methods
    if [[ "$#" == "3" ]]; then 
	methods=${3}
    fi

    for key in $keys; do
	if [[ "$key" =~ (.+?):(.+) ]]; then
	    key=${BASH_REMATCH[1]}
	fi
	clean_keys="$clean_keys $key"
    done

    if [[ "$methods" != 'nil' ]]; then

	local interface=(new code $clean_keys $methods)
	have_interface=1

        # prepare interface options (prefix with --)
	local i=0
	for ((i=0; i<${#interface[@]}; i++)); do
	    interface[$i]="--${interface[$i]}"
	done
	interface="${interface[@]}"
    fi

    local tmpfile=$_objects_cache_home/$name.bash

    if [[ -f $tmpfile ]]; then
	source $tmpfile
	return 0
    fi

    cat $_objects_site/object | \
	sed "s|_objects_keys=()|_objects_keys=($clean_keys)|" | \
	sed "s|_objects_interface_options=''|_objects_interface_options='$interface' |" | \
	sed "s|_objects_have_interface=0|_objects_have_interface=$have_interface|" | \
	sed "s|_objects_interface_methods=''|_objects_interface_methods='$methods'|" | \
	sed "s|object|$name|g;s|_$name|_$(§objects.namespace)_$name|g;" | \
	sed "s|oBjEcT|object|g" \
	> $tmpfile

    local i=0
    local access='rw'
    for key in $keys; do
	if [[ "$key" =~ (.+?):(.*) ]]; then
	    key=${BASH_REMATCH[1]}
	    access=${BASH_REMATCH[2]}
	    [[ "$access" == "b" ]] && access="rwb"
	    [[ "$access" == "a" ]] && access="rwa"
	else
	    access="rw"
	fi

	if [[ "$access" =~ r ]]; then
	    if [[ "$access" =~ a ]]; then
      		§object.create_array_reader $name $key $i
	    else
		§object.create_reader $name $key $i
	    fi
	fi
	if [[ "$access" =~ w ]]; then
	    if [[ "$access" =~ b ]]; then
		§object.create_bool_writer $name $key $i
	    elif [[ "$access" =~ a ]]; then
		§object.create_array_writer $name $key $i
	    else
		§object.create_writer $name $key $i
	    fi
	fi
	let i++
    done
    
    source $tmpfile

    return 0
}

function §objects.init {
    local type=""
    for type in $_objects_types; do
	eval "§${type}s.init"
    done
    §objects.seek_start
}

function §objects.dump {
    local type=""
    for type in $_objects_types; do
	eval "§${type}s.dump"
    done
}

function §objects.restore {
    local type=""
    for type in $_objects_types; do
	eval "§${type}s.restore"
    done
}

function §objects.clear {
    local type=""
    for type in $_objects_types; do
	eval "§${type}s.clear"
    done
}

function §object.create_reader {
    local name="$1"
    local NAME="$(§objects.namespace)_$name"
    local key="$2"
    local field="$3"
    local tmpfile=$_objects_cache_home/$name.bash

    echo $(cat <<EOF

function §${name}.get_${key} {
    echo "\${_${NAME}s[\$_${NAME}s_position+$field]}";
}
EOF
    ) >> $tmpfile
}

function §object.create_writer {
    local name="$1"
    local NAME="$(§objects.namespace)_$name"
    local key="$2"
    local field="$3"
    local tmpfile=$_objects_cache_home/$name.bash

    echo $(cat <<EOF

function §${name}.set_${key} {
    _${NAME}s[\$_${NAME}s_position+$field]="\$@";
    _${NAME}s_modified=1;
}
EOF
    ) >> $tmpfile
}

function §object.create_array_reader {
    local name="$1"
    local NAME="$(§objects.namespace)_$name"
    local key="$2"
    local field="$3"
    local tmpfile=$_objects_cache_home/$name.bash

    echo $(cat <<EOF

function §${name}.get_${key} {
    local var="\$1";
    local data="\${_${NAME}s[\$_${NAME}s_position+$field]}";
    
    if [[ -z "\$data" ]]; then
      echo "declare -a \$var";
    else
      echo "declare -a \$var=\$data";
    fi
}
EOF
    ) >> $tmpfile
}

function §object.create_array_writer {
    local name="$1"
    local NAME="$(§objects.namespace)_$name"
    local key="$2"
    local field="$3"
    local tmpfile=$_objects_cache_home/$name.bash

    echo $(cat <<EOF

function §${name}.set_${key} {
    declare -a a=("\$@");
    
    local data="\$(declare -p a)";
    data="\${data:14:\${#data}-15}";    

    _${NAME}s[\$_${NAME}s_position+$field]="\$data";
    _${NAME}s_modified=1;
}
EOF
    ) >> $tmpfile
}

function §object.create_bool_writer {
    local name="$1"
    local NAME="$(§objects.namespace)_$name"
    local key="$2"
    local field="$3"
    local tmpfile=$_objects_cache_home/$name.bash

    echo $(cat <<EOF

function §${name}.set_${key} {

     local input="\$1";
     local value=0;

     [[ -n "\$input" ]] && value=1;
     [[ "\$input" =~ ^([Yy]es|[Tt]rue|[Oo]n|1)\$ ]] && value=1;
     [[ "\$input" =~ ^([Nn]o|[Ff]alse|[Oo]ff|0)\$ ]] && value=0;

    _${NAME}s[\$_${NAME}s_position+$field]=\$value;
    _${NAME}s_modified=1;
}
EOF
    ) >> $tmpfile
}

