# -*- shell-script -*-

################################################################################

function action.set_core {
    _BASHRUN_ACTIONS[${_BASHRUN_ACTIONS_POSITION}+7]="$1"
}

# pass #########################################################################

+action --new 'pass'
--desc 'passthrough command'
--type 'shell'
--core 1

action-pass () { :; }

# shell ########################################################################

+action --new shell
--type shell
--core 1

function action-shell {
    eval "$command"
    return 1
}
# ping #########################################################################

+action --new 'ping'
--desc 'Pong the process that pinged.'
--type 'launch'
--core 1

action-ping () 
{ 
    kill -USR1 $(command);
    return 1
}

# debug ################################################################################

+action --new debug
--desc "Toggle debug mode."
--type "shell"
--core 1

action-debug () {

    if [[ BASHRUN_DEBUG -eq 0 ]]; then
	BASHRUN_DEBUG=1
	bashrun.debug "debug mode" -g "enabled"
    else
	bashrun.debug "debug mode" -r "disabled"
	BASHRUN_DEBUG=0
    fi
    return 1
}

# edit-mode #####################################################################

+action --new 'edit-mode'
--desc 'edit-mode'
--type 'shell'
--bind '\ee'
--deps 'xdotool'
--init 'BASHRUN_EDIT_MODE=0'
--core 1

action-edit-mode () {
    if [[ BASHRUN_EDIT_MODE -eq 0 ]]; then
	bashrun.edit_mode 1
    else
	bashrun.edit_mode 0
    fi
    return 1
}

## action run ##################################################################

+action --new 'run'
--desc 'Run command'
--type 'trap-and-launch'
--bind '\e\C-m'
--core 1

action-run () 
{ 
    ! executable? && +handlers;
    +rules;
    return 0
}

## action run-term #############################################################

+action --new 'run-term'
--desc 'Run command in terminal'
--type 'trap-and-launch'
--bind '\et'
--core 1

action-run-term () 
{ 
    ! executable? && +handlers;
    +terminal;
    return 0
}

## action run-page #############################################################

+action --new 'run-page'
--desc 'Run command in terminal and page'
--type 'trap-and-launch'
--bind '\e+'
--core 1

action-run-page () 
{ 
    ! executable? && +handlers;
    +pager;
    +terminal;
    return 0
}

## action run-hold #############################################################

+action --new 'run-hold'
--desc 'Run command in terminal and hold'
--type 'trap-and-launch'
--bind '\eh'
--core 1

action-run-hold () 
{ 
    ! executable? && +handlers;
    command "($(command)); read -n1";
    +terminal;
    return 0
}

## action su-run ###############################################################

+action --new 'su-run'
--desc 'Run command as root'
--type 'trap-and-launch'
--core 1

action-su-run () 
{ 
    action-run;
    +user root;
    return 0
}

## action su-run-term ##########################################################

+action --new 'su-run-term'
--desc 'Run command in terminal as root'
--type 'trap-and-launch'
--bind '\es\C-m'
--core 1

action-su-run-term () 
{ 
    action-run-term;
    +user root;
    return 0
}


# map/unmap/toggle ###############################################################

+action --new 'window-map'
--desc "map window"
--type "shell"
--deps 'xdotool'
--core 1

function action-window-map {
    bashrun.window.map
    return 1
}

+action --new 'window-unmap'
--desc "unmap window"
--type "shell" 
--deps 'xdotool'
--core 1

function action-window-unmap {
    bashrun.window.unmap
    return 1
}

+action --new 'window-toggle'
--desc 'toggle window state'
--type 'shell'
--deps 'xdotool'
--core 1

function action-window-toggle {
    bashrun.window.toggle
    return 1
}

+action --new 'window-resize'
--desc 'resize window'
--type 'shell'
--core 1

function action-window-resize {
    bashrun.window.size $1 $2
    return 1
}

################################################################################

unset -f action.set_core

