# -*- shell-script -*-

################################################################################

# pass #########################################################################

+action --new 'pass'
--desc 'passthrough command'
--type 'shell'
--default 1

action-pass () { :; }

# shell ########################################################################

+action --new shell
--type shell
--default 1

function action-shell {
    eval "$command"
    return 1
}
# ping #########################################################################

+action --new 'ping'
--desc 'Pong the process that pinged.'
--type 'launch'
--default 1

action-ping () 
{ 
    kill -USR1 $(command);
    return 1
}

# debug ################################################################################

+action --new debug
--desc "Toggle debug mode."
--type "shell"
--default 1

action-debug () {

    if [[ BASHRUN_DEBUG -eq 0 ]]; then
	BASHRUN_DEBUG=1
	bashrun.debug "debug mode" -g "enabled"
    else
	bashrun.debug "debug mode" -r "disabled"
	BASHRUN_DEBUG=0
    fi
    return 1
}

# edit-mode #####################################################################

+action --new 'edit-mode-enter'
--desc 'edit-mode-enter'
--type 'shell'
--bind '\ee'
--deps 'xdotool'
--shutdown "+action edit-mode-enter --bind '\ee'"
--default 1

action-edit-mode-enter () 
{     
    local current=$(objects.focus)
    +action edit-mode-leave --bind '\ee';
    actions.seek_start
    
    OLDPS1="$PS1";
    PS1='\[\033[1;34m\]<\[\033[1;33m\]$(objects.focus)\[\033[1;34m\]:\[\033[1;37m\] $(+$(objects.focus) --name)\[\033[1;34m\]> \[\033[0m\]';
    
    function ls () 
    { 
        $(objects.focus)s.list "$@"
    };
    complete -F objects.complete_id ls
    
    function cd ()
    {
	if [[ "$#" == "0" ]]; then
	    +action
	    return
	fi
	
	if type -t +$1 &> /dev/null; then
	    +$1
	fi
    }
    complete -F objects.complete_type cd

    cd $current

    xdotool keyup alt;
    xdotool key ctrl+m;
    return 1
}

+action --new 'edit-mode-leave'
--desc 'edit-mode-leave'
--deps 'xdotool'
--type 'shell'
--default 1

action-edit-mode-leave () 
{ 
    PS1="$OLDPS1";
    unset -f ls;
    complete -r ls

    unset -f cd
    complete -r cd

    +action edit-mode-enter --bind '\ee';
    actions.seek_start

    xdotool keyup alt;
    xdotool key ctrl+m;
    return 1
}

# map/unmap/toggle ###############################################################

+action --new 'map'
--desc "map window, should work for xterm, urxvt (both set WINDOWID)"
--type "shell"
--init "BASHRUN_WINDOW_STATE=1"
--default 1

function action-map {
    xdotool windowmap $WINDOWID
    BASHRUN_WINDOW_STATE=1
    return 1
}

+action --new 'unmap'
--desc "unmap window"
--type "shell" 
--default 1

function action-unmap {
    xdotool windowunmap $WINDOWID
    BASHRUN_WINDOW_STATE=0
    return 1
}

+action --new 'toggle'
--desc 'toggle window state'
--type 'shell'
--default 1

function action-toggle {
    if [[ BASHRUN_WINDOW_STATE -eq 1 ]]; then
	action-unmap
    else
	action-map
    fi
    return 1
}

