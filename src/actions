# -*- shell-script -*-

################################################################################

object "action" "name type desc deps help" "bind unbind rebind"

################################################################################

function_clone "action_new" "_action_new"

function action_new {

    _action_new "$1"
    action_set_type "trap-and-launch"
    action_set_desc "$1"

    if ! type -t action-$1; then
	eval "
	action-$1 ()
	{ 
	    !executable? && +handlers
	    +terminal
	    return 0
	}"
    fi
}

function action_bind {

    local action=$(action_name)
    local type=$(action_type)

    local keyseq=$1
    local keymap=${2:-emacs}
    local keyname=${3:-$(ks2kn $keyseq)}

    local bind=''
    local accept='\C-z\x01'
    local char=''

    # if "pass", bind keyseq directly to accept-line (readline) and return
    if [[ "$action" == "pass" ]]; then
	bind="-m $keymap '\"$keyseq\": accept-line'"
	eval "bind $bind"
	# create or set binding
	if bindings_seek $keyseq $keymap; then
	    binding_set_action $action
	    binding_set_keymap $keymap
	    binding_set_is_bound 1 
	else
	    binding_new $keyseq $keymap $action 1
	fi    
	return 0
    fi

    if ! internals_seek $action $keymap; then
	internal_new $action $keymap "new"
    fi
    internals_seek $action $keymap

    if [[ "$(internal_char)" == "new" ]]; then
	
        # no previous internal binding, get next invalid character to bind to
	char=$(printf "%.2X" $BASHRUN_BINDINGS_NEXT_CHAR)

	if [[ BASHRUN_BINDINGS_NEXT_CHAR -gt 0x7f ]]; then
	    bashrun_log "maximum number of internal keyseqs reached, skipping..." "fail"
	    return 1
	fi
	
	bind="-m $keymap -x \$'\"\C-z\\x$char\":"
	bind="$bind tput cr; bashrun_engine_action $action'"

	bashrun_log "int: $action ($type) -> \C-z\\x$char ($keymap)"
	# echo "bind $bind"
	eval "bind $bind"	    
	
	 # save char in internal	
	internal_set_char $char
	
	# next free char
	let BASHRUN_BINDINGS_NEXT_CHAR+=1
    else
	# there's already a internal character bound, use it
	char=$(internal_char)
	bashrun_log "redirecting: $action ($type) -> $char ($keymap)"
    fi
    
    # don't accept-line for 'launch' or 'shell' bindings
    if [[ "$type" != 'trap-and-launch' ]]; then
	accept=''
    fi

    # bind the requested keyseq to the internal character
    bind="-m $keymap '\"$keyseq\"':$'\"\C-z\x$char$accept\"'"
    
    # bind
    bashrun_log "usr: $action ($type) -> $keyname ($keymap)"
    # echo "bind $bind"
    eval "bind $bind"

    # create or set binding
    if bindings_seek $keyseq $keymap; then
	binding_set_action $action
	binding_set_keymap $keymap
	binding_set_is_bound 1 
    else
	binding_new $keyseq $keymap $action 1
    fi    
    
    # create or set keyname
    if keynames_seek $keyseq; then
	keyname_set_name $keyname
    else
	keyname_new $keyseq $keyname
    fi
    return 0
}

function action_unbind {
    
    local action=$(action_name)
    local keymap=${1:-emacs}
    local keyseq=$2
    local unbind=''
    local found=0
    local id=''

    if [[ "$keyseq" == '' ]]; then
        # find the next bound binding
	for id in $(bindings_select action $action); do
	    if bindings_seek $id $keymap; then
		if binding_bound?; then
		    found=1
		    break
		fi
	    fi
	done
	[[ found -eq 0 ]] && return 1
	
        # get the keyseq that it's bound to
	keyseq=$(binding_keyseq)
    fi
    
    # unbind keyseq
    unbind="-m $keymap -r '$keyseq'"
    bashrun_log "$action from $keyseq ($keymap)"
    eval "bind $unbind"

    # rebind original readline binding
    readline_rebind "$keyseq" "$keymap"

    # clear binding
    binding_set_is_bound 0

    return 0
}

function action_rebind {

    local action=$(action_name)

    local keymap=${1:-emacs}
    local keyseq=''
    local found=0
    local id=''

    # find the next unbound binding
    for id in $(bindings_select action $action); do
	if bindings_seek $id $keymap; then
	    if ! binding_bound?; then
		found=1
		break
	    fi
	fi
    done
    [[ found -eq 0 ]] && return 1

    # get the keyseq that it was bound to before
    keyseq=$(binding_keyseq)

    action_bind $keyseq
    return $?
} 

function action_bound? {
    local action=$(action_name)
    local id=0

    for id in $(bindings_select is_bound 1); do
	bindings_seek $id
	if [[ "$(binding_action)" == $action ]]; then
	    return 0
	fi
    done
    return 1
}

function action_function? {
    type -t action-$(action_name) &> /dev/null
    return $?
}

function action_available? {

    local dep=''
    declare -i result=0

    for dep in $(action_deps); do
	if ! `which $dep &> /dev/null`; then
	    result=1
	fi
    done
    return $result
}

function action_uses {

    local code="$(type action-$(action_name))"
    local applies=""
    local methods=""
    methods="$methods §command §line §handlers §rules §terminal §user"

    local method=''
    for method in $methods; do
	if [[ "$code" =~ ${method} ]]; then
	    if [[ "$method" == "§user" ]]; then
		if [[ "$code" =~ §user\ +?([^\}\;]+) ]]; then 
		    applies="$applies, user:${BASH_REMATCH[1]}"
		fi
	    else
		applies="$applies, ${method/§/}"
	    fi
	fi
    done
    applies="${applies:2}"
    echo "$applies"
}

function action_run_function {
    
    local action=$(action_name)

    local retval
    declare -i retval

    # enable the action interface
    action_runtime_interface_create

    # run the action function
    action-$(action_name)
    retval=$?

    # disable the action interface
    action_runtime_interface_destroy

    local msg="action-$action returned $retval ->"
    [[ retval -eq 0 ]] && msg="$msg execute"
    [[ retval -eq 1 ]] && msg="$msg done"
    bashrun_log "$msg"

    return $retval
}

function action_runtime_interface_create {

    function command {
	if [[ "$#" == "0" ]]; then
	    echo $BASHRUN_COMMAND
	else
	    BASHRUN_COMMAND="$@"
	    bashrun_log "$BASHRUN_COMMAND"
	fi
    }

    function line { echo $BASHRUN_COMMAND_LINE; }

    function executable? {
	bashrun_command_word_is_executable?
	return $?
    }

    function builtin? {
	bashrun_command_word_is_builtin?
	return $?
    }

    function bookmark? {
	bashrun_command_word_is_bookmark?
    }
    
    function +handlers { handlers_apply; }
    function +rules { :; }
    function +terminal { bashrun_command_wrap_in_terminal; }
    function +user { bashrun_command_wrap_in_su ${1:-root}; }
}

function action_runtime_interface_destroy {

        unset -f \
	    command \
	    line \
	    executable? \
	    builtin? \
	    bookmark? \
	    +handlers \
	    +rules \
	    +terminal \
	    +user
}

function action_pretty_print_deps {

    local dep=''
    local deps="$(action_deps)"
    local str=''
    local found=$R

    if [[ $deps != '' ]]; then
	
	for dep in $deps; do
	    if `which $dep &> /dev/null`; then
		found=$G
	    else
		found=$R
	    fi
	    str=", $found$dep$N$str" 
	done
	str="${str:2}"
	echo -ne "$str"
    fi
}

function action_list {

    local name=$(action_name)
    local desc=$(action_desc)
    local type=$(action_type)
    local deps=$(action_deps)
    local help=$(action_help)
    local uses=$(action_uses)
    
    # print header
    print_header "$name -> $desc" "-"

    echo "type: $type"

    if [[ $deps != '' ]]; then
	echo -e "deps: $(action_pretty_print_deps)"
    fi

    if [[ "$uses" != '' ]]; then
	echo "uses: $uses"
    fi
    echo

    local id=''
    if action_bound?; then
	bindings_seek_start
	for id in $(bindings_select action $name); do
	    bindings_seek --next $id 
	    echo -ne '\t'
	    echo "$(ks2kn $(binding_keyseq)) ($(binding_keymap)-mode)"
	done
	echo
    fi

    if [[ "$help" != '' ]]; then
	echo "$help"
	echo
    fi
}

function action_code {
    
    local name=$(action_name)
    local desc=$(action_desc)
    local type=$(action_type)
    local deps=$(action_deps)
    local help=$(action_help)

    print_header "$desc" "#"

    # add action 
    echo "+action --new '$name'"
    echo
    echo "--desc '$desc'"
    echo "--type '$type'"
    [[ "$deps" != "" ]] && echo "--deps '$deps'"
    [[ "$help" != "" ]] && echo "--help '$help'"
    
    # bind action
    local id=''
    if action_bound?; then
	bindings_seek_start
	for id in $(bindings_select action $name); do
	    bindings_seek --next $id 
	    binding_code
	done
    fi
    echo

    # function
    if action_function?; then
	function_code "action-$name"
    fi
    echo
}

################################################################################
