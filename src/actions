# -*- shell-script -*-

class "action" "name:r type desc deps help init reset core:r" "bind unbind rebind"

function_clone "action.new" "_action.new"
function action.new {

    _action.new "$1"
    action.set_type "trap-and-launch"
    action.set_desc "$1"

    if ! type -t action-$1 &> /dev/null; then
	eval "
	action-$1 ()
	{ 
	    ! executable? && +handlers
	    +terminal
	    return 0
	}"
    fi
}

function action.bind {

    local action=$(action.get_name)
    local type=$(action.get_type)

    local keyseq=$1
    local keymap=${2:-emacs}
    local keyname=${3:-$(ks2kn $keyseq)}

    local bind=''
    local accept='\C-z\x01'
    local char=''

    # if "pass", bind keyseq directly to accept-line (readline) and return
    if [[ "$action" == "pass" ]]; then
	bind="-m $keymap '\"$keyseq\": accept-line'"
	eval "bind $bind"
	# create or set binding
	if bindings.seek $keyseq $keymap; then
	    binding.set_action $action
	    binding.set_keymap $keymap	    
	    binding.set_is_bound 1 
	    binding.set_readline "$bind"
	else
	    binding.new "$keyseq" "$keymap" "$action" "1" "$bind"
	fi    
	return 0
    fi

    if ! internals.seek $action $keymap; then
	internal.new $action $keymap "new"
    fi
    internals.seek $action $keymap

    if [[ "$(internal.get_char)" == "new" ]]; then
	
        # no previous internal binding, get next invalid character to bind to
	char=$(printf "%.2X" $BASHRUN_BINDINGS_NEXT_CHAR)

	if [[ BASHRUN_BINDINGS_NEXT_CHAR -gt 0x7f ]]; then
	    bashrun.debug warn "maximum number of internal keyseqs reached, skipping..."
	    return 1
	fi
	
	bind="-m $keymap -x \$'\"\C-z\\x$char\":"
	bind="$bind tput cr; bashrun.engine.action $action'"

	bashrun.debug -y "int" -v "$action" "->" -v "\C-z\\x$char" "($keymap)" 
	eval "bind $bind"	    
	
	#save readline binding in internal
	internal.set_readline "$bind"

	# save char in internal	
	internal.set_char $char
	
	# next free char
	let BASHRUN_BINDINGS_NEXT_CHAR+=1
	until [[ ! "$BASHRUN_BINDINGS_BLACKLIST" =~ \ $BASHRUN_BINDINGS_NEXT_CHAR\  ]]; do
	    let BASHRUN_BINDINGS_NEXT_CHAR+=1
	done
    else
	# there's already an internal character bound, use it
	char=$(internal.get_char)
	bashrun.debug -y "ref" -v "$action" "->" -v "\C-z\\x$char" "($keymap)" 
    fi
    
    # don't accept-line for 'launch' or 'shell' bindings
    if [[ "$type" != 'trap-and-launch' ]]; then
	accept=''
    fi

    # bind the requested keyseq to the internal character
    bind="-m $keymap '\"$keyseq\"':$'\"\C-z\x$char$accept\"'"
    
    # bind
    bashrun.debug emph -y "usr" -v "$action" "->" -v "$keyname" "($keymap)" 
    # echo "bind $bind"
    eval "bind $bind"

    # create or set binding
    if bindings.seek $keyseq $keymap; then
	binding.set_action $action
	binding.set_keymap $keymap
	binding.set_is_bound 1 
	binding.set_readline "$bind" 
    else
	binding.new $keyseq $keymap $action 1 "$bind"
    fi    
    
    # create or set keyname
    if keynames.seek $keyseq; then
	keyname.set_name $keyname
    else
	keyname.new $keyseq $keyname
    fi
    return 0
}

function action.unbind {
    
    local action=$(action.get_name)
    local keymap=${1:-emacs}
    local keyseq=$2
    local unbind=''
    local found=0
    local id=''

    if [[ "$keyseq" == '' ]]; then
        # find the next bound binding
	for id in $(bindings.select action $action); do
	    if bindings.seek $id $keymap; then
		if binding.bound?; then
		    found=1
		    break
		fi
	    fi
	done
	[[ found -eq 0 ]] && return 1
	
        # get the keyseq that it's bound to
	keyseq=$(binding.get_keyseq)
    fi
    
    # unbind keyseq
    unbind="-m $keymap -r '$keyseq'"
    bashrun.debug -v "$action" "from" -v "$keyseq" -v "($keymap)"
    eval "bind $unbind"

    # rebind original readline binding
    readline_rebind "$keyseq" "$keymap"

    # clear binding
    binding.set_is_bound 0
    binding.set_readline ''

    return 0
}

function action.rebind {

    local action=$(action.get_name)

    local keymap=${1:-emacs}
    local keyseq=''
    local found=0
    local id=''

    # find the next unbound binding
    for id in $(bindings.select action $action); do
	if bindings.seek $id $keymap; then
	    found=1
	    break
	fi
    done
    [[ found -eq 0 ]] && return 1

    # get the keyseq that it was bound to before
    keyseq=$(binding.get_keyseq)

    # get the action that's bound to this keyseq and unbind it
    for id in bindings.select keyseq $keyseq; do
	bindings.seek $id
	if actions.seek $(binding.get_action); then
	    action.unbind
	fi
    done

    # rebind action
    actions.seek $action
    action.bind $keyseq

    return $?
} 

function action.bound? {
    local action=$(action.get_name)
    local saved=$(binding.get_keyseq)

    local id=''
    for id in $(bindings.select is_bound 1); do
	bindings.seek $id
	if [[ "$(binding.get_action)" == $action ]]; then
	    bindings.seek $saved
	    return 0
	fi
    done
    bindings.seek $saved
    return 1
}

function action.function? {
    type -t action-$(action.get_name) &> /dev/null
    return $?
}

function action.available? {

    local dep=''
    declare -i result=0

    for dep in $(action.get_deps); do
	if ! `which $dep &> /dev/null`; then
	    result=1
	fi
    done
    return $result
}

function action.core? {
    [[ "$(action.get_core)" == "1" ]] && return 0
    return 1
}

function action.uses {

    local code="$(type action-$(action.get_name))"
    local applies=""
    local methods="command line \+handlers \+rules \+terminal \+pager \+user executable? builtin? bookmark?"

    local method=''
    for method in $methods; do
	if [[ "$code" =~ ${method} ]]; then
	    if [[ "$method" == "+user" ]]; then
		if [[ "$code" =~ \+user\ +?([^\}\;]+) ]]; then 
		    applies="$applies, user:${BASH_REMATCH[1]}"
		fi
	    else
		applies="$applies, ${method/\\+/}"
	    fi
	fi
    done
    applies="${applies:2}"
    echo "$applies"
}

function action.run {
    
    local action=$(action.get_name)

    bashrun.separator "action-$action"

    local retval

    # enable the action interface
    action.api.enable

    # enable action debugging
    BASHRUN_DEBUG_ACTION=1

    # run the action function
    action-$action "$@"
    retval=$?

    # disable action debugging
    BASHRUN_DEBUG_ACTION=0

    # disable the action interface
    action.runtime_interface_destroy

    local res=""
    [[ retval -eq 0 ]] && res="-c launch"
    [[ retval -eq 1 ]] && res="-y abort"
    bashrun.debug -v "$action" "returned" -v "$retval" "->" $res

    return $retval
}

function action.api.enable {

    function command {
	if [[ "$#" == "0" ]]; then
	    echo $BASHRUN_COMMAND
	else
	    BASHRUN_COMMAND="$@"
	    bashrun.debug "$BASHRUN_COMMAND"
	fi
    }
    function word { 
	bashrun.command.get_word; 
	echo "$BASHRUN_COMMAND_WORD";
    }
    function line { echo $BASHRUN_COMMAND_LINE; }

    function executable? {
	bashrun.command.executable?
	return $?
    }

    function builtin? {
	bashrun.command.builtin?
	return $?
    }

    function bookmark? {
	bashrun.command.bookmark?
    }
    
    function +handlers { handlers.apply; }
    function +rules { rules.apply; }
    function +terminal { bashrun.command.add_terminal; }
    function +pager { bashrun.command.add_pager; }
    function +user { bashrun.command.add_su ${1:-root}; }
}

function action.runtime_interface_destroy {

        unset -f \
	    command \
	    word \
	    line \
	    executable? \
	    builtin? \
	    bookmark? \
	    +handlers \
	    +rules \
	    +terminal \
	    +pager \
	    +user
}

function action.pretty_print_deps {

    local dep=''
    local deps="$(action.get_deps)"
    local str=''

    local r="\033[1;31m" # red
    local g="\033[1;32m" # green 
    local n="\033[0m"    # none

    local found=$r

    if [[ $deps != '' ]]; then
	
	for dep in $deps; do
	    if `which $dep &> /dev/null`; then
		found=$g
	    else
		found=$r
	    fi
	    str=", $found$dep$n$str" 
	done
	str="${str:2}"
	echo -ne "$str"
    fi
}

function action.list {

    if [[ "$1" != "-l" ]]; then
	echo $(action.get_name)
	return 0
    fi

    local name=$(action.get_name)
    local desc=$(action.get_desc)
    local type=$(action.get_type)
    local deps=$(action.get_deps)
    local help=$(action.get_help)
    local uses=$(action.uses)
    
    # print header
    print_header "$name -> $desc" "-"

    echo "type: $type"

    if [[ $deps != '' ]]; then
	echo -e "deps: $(action.pretty_print_deps)"
    fi

    if [[ "$uses" != '' ]]; then
	echo "uses: $uses"
    fi
    echo

    local id=''
    if action.bound?; then
	bindings.seek_start
	for id in $(bindings.select action $name); do
	    bindings.seek --next $id 
	    echo -ne '\t'
	    echo "$(ks2kn $(binding.get_keyseq)) ($(binding.get_keymap)-mode)"
	done
	echo
    fi

    if [[ "$help" != '' ]]; then
	echo "$help"
	echo
    fi
}

function action.code {

    local name=$(action.get_name)
    
    # save only bindings for core actions
    if action.core?; then	
	if action.bound?; then
	    bindings.seek_start
	    local id=''
	    for id in $(bindings.select action $name); do
		bindings.seek --next $id 
		echo "+action $(action.get_name) $(binding.code)"
	    done
	fi
	return 0
    fi

    local desc=$(action.get_desc)
    local type=$(action.get_type)
    local deps=$(action.get_deps)
    local help=$(action.get_help)
    local init=$(action.get_init)
    local reset=$(action.get_reset)

    print_line "action $name" "#" "80"
    echo

    # add action 
    echo "+action --new '$name'"
    echo "--desc '$desc'"
    echo "--type '$type'"
    [[ "$deps" != "" ]] && echo "--deps '$deps'"
    [[ "$help" != "" ]] && echo "--help '$help'"
    [[ "$init" != "" ]] && echo "--init '$init'"
    [[ "$reset" != "" ]] && echo "--reset '$reset'"
    
    # bind action
    if action.bound?; then
	bindings.seek_start
	for id in $(bindings.select action $name); do
	    bindings.seek --next $id 
	    binding.code
	done
    fi
    echo

    # function
    if action.function?; then
	function_code "action-$name"
    fi
    echo
}

function_clone "actions.dump" "_actions.dump"

function actions.dump {

    local file=$_OBJECTS_DATA_HOME/actions.dump
    local action=''
    _actions.dump

    local saved=$(action.get_name)

    actions.seek_start
    while actions.next?; do
	action=$(action.get_name)
	function_code "action-$action" >> $file
	actions.next
    done
    actions.seek $saved
}

function actions.init {
    
    local action=""
    local callback=""

    actions.seek_start
    while actions.next?; do
	action=$(action.get_name)
	callback=$(action.get_init)
	if [[ "$callback" != "" ]]; then
	    eval "$callback"
	fi
	actions.seek $action
	actions.next
    done    
    actions.seek_start
}

function actions.reset {
    
    local action=""
    local callback=""

    actions.seek_start
    while actions.next?; do
	action=$(action.get_name)
	callback=$(action.get_reset)
	if [[ "$callback" != "" ]]; then
	    echo "reset: $callback"
	    eval "$callback"
	fi
	actions.seek $action
	actions.next
    done    
    actions.seek_start
}

################################################################################
