# -*- shell-script -*-

BASHRUN_WINDOW_ID=""
BASHRUN_WINDOW_POS_X=0
BASHRUN_WINDOW_POS_Y=0
BASHRUN_WINDOW_WIDTH=$COLUMNS
BASHRUN_WINDOW_HEIGHT=$LINES
BASHRUN_WINDOW_MAPPED=1
BASHRUN_WINDOW_ANIMATE=0
BASHRUN_WINDOW_POSFILE=${XDG_CACHE_HOME:-$HOME/.cache}/bashrun-engine/pos

function bashrun.window? {

    if [[ "$BASHRUN_WINDOW_ID" != '' ]]; then
	return 0
    fi
    return 1
}

function bashrun.window.mapped? {
    bashrun.window? || return 1

    [[ BASHRUN_WINDOW_MAPPED -eq 1 ]]
    return $?
}

function bashrun.window.terminal? {
    bashrun.window? || return 1
    if [[ "$TERM" =~ (xterm|rxvt) && "$BASHRUN_WINDOW_ID" == "$WINDOWID" ]]; then
	return 0
    fi
    return 1
}

function bashrun.window.animate? {
     bashrun.window? || return 1

    [[ BASHRUN_WINDOW_ANIMATE -eq 1 ]]
    return $?
}
function bashrun.window.animate {
    BASHRUN_WINDOW_ANIMATE=${1:-1}
}

function bashrun.window.id {
    
    if [[ $# -eq 0 ]]; then
	echo $BASHRUN_WINDOW_ID
    else
	BASHRUN_WINDOW_ID=$1	    
	bashrun.window.update
    fi
    return 0
}

function bashrun.window.update {

    local saved="$IFS"
    local line=''
    local x y w h

    IFS=$'\n'
    for line in $(xwininfo -id $BASHRUN_WINDOW_ID); do

	if [[ "$line" =~ "Absolute upper-left X:  "([0-9]+) ]]; then
	    x=${BASH_REMATCH[1]}
	fi

	if [[ "$line" =~ "Relative upper-left X:  "([0-9]+) ]]; then
	    (( x-=${BASH_REMATCH[1]} ))
	fi

	if [[ "$line" =~ "Absolute upper-left Y:  "([0-9]+) ]]; then
	    y=${BASH_REMATCH[1]}
	fi

	if [[ "$line" =~ "Relative upper-left Y:  "([0-9]+) ]]; then
	    (( y-=${BASH_REMATCH[1]} ))
	fi

	if [[ "$line" =~ "-geometry "([0-9]+)x([0-9]+) ]]; then
	    w=${BASH_REMATCH[1]}
	    h=${BASH_REMATCH[2]}
	fi

	if [[ "$line" =~ "Map State: "(.+) ]]; then
	    [[ ${BASH_REMATCH[1]} == 'IsUnMapped' ]] && BASHRUN_WINDOW_MAPPED=0
	    [[ ${BASH_REMATCH[1]} == 'IsViewable' ]] && BASHRUN_WINDOW_MAPPED=1
	fi
    done
    IFS="$saved"

    BASHRUN_WINDOW_POS_X=$x
    BASHRUN_WINDOW_POS_Y=$y
    BASHRUN_WINDOW_WIDTH=$w
    BASHRUN_WINDOW_HEIGHT=$h

    [ -f $BASHRUN_MODEFILE ] && BASHRUN_WINDOW_ANIMATE="$(cat $BASHRUN_MODEFILE)"
}

function bashrun.window.pos {
   if [[ $# -eq 0 ]]; then
       bashrun.window.update
       echo $BASHRUN_WINDOW_POS_X $BASHRUN_WINDOW_POS_Y
   else
       bashrun.window? || return 1

       local x="$1"
       local y="$2"

       if [[ "$x" =~ ([0-9]+)x([0-9]+) ]]; then
	   x=${BASH_REMATCH[1]}
	   y=${BASH_REMATCH[2]}
       fi

       xdotool windowmove $BASHRUN_WINDOW_ID $x $y
       BASHRUN_WINDOW_POS_X=$x
       BASHRUN_WINDOW_POS_Y=$y
   fi
   return 0
}

function bashrun.window.size {
    
    if [[ $# -eq 0 ]]; then
	bashrun.window.update
	echo $BASHRUN_WINDOW_WIDTH $BASHRUN_WINDOW_HEIGHT
	return 0;
    fi

    bashrun.window? || return 1

    if ! bashrun.window.terminal?; then

	# resize from the outside using xdotool

	if [[ $# -eq 1 ]]; then
	    if [[ "$width" =~ ([0-9]+)x([0-9]+) ]]; then
		local w=${BASH_REMATCH[1]}
		local h=${BASH_REMATCH[2]}
		xdotool windowsize $BASHRUN_WINDOW_ID $w $h
		BASHRUN_WINDOW_WIDTH=$w
		BASHRUN_WINDOW_HEIGHT=$h
	    fi
	fi

	if [[ $# -eq 2 ]]; then
	    xdotool windowsize $BASHRUN_WINDOW_ID $1 $2
	    BASHRUN_WINDOW_WIDTH=$1
	    BASHRUN_WINDOW_HEIGHT=$2
	fi 
	
	if [[ $# -eq 3 && "$1" == "--hint" ]]; then
	    xdotool windowsize --usehints $BASHRUN_WINDOW_ID $2 $3
	    BASHRUN_WINDOW_WIDTH=$2
	    BASHRUN_WINDOW_HEIGHT=$3
	fi

    else
	# resize from the inside using ansi-escapes
        # args: [up|down|left|right] || columns lines || "<columns>x<lines>"

	if [[ "$1" == "--hint" ]]; then
	    shift
	fi

	local dir=$1
	local columns=$1
	local lines=$2
	local update=${3:-1}

        # set new BASHRUN_WINDOW_WIDTH, BASHRUN_WINDOW_HEIGHT
	case "$dir" in
	    up)
		let BASHRUN_WINDOW_HEIGHT--
		;;
	    down)
		let BASHRUN_WINDOW_HEIGHT++
		;;
	    left)
		let BASHRUN_WINDOW_WIDTH--
		;;
	    right)
		let BASHRUN_WINDOW_WIDTH++
		;;
	    *)
		if [[ "$columns" =~ ([0-9]+)x([0-9]+) ]]; then
		    columns=${BASH_REMATCH[1]}
		    lines=${BASH_REMATCH[2]}
		fi
		BASHRUN_WINDOW_WIDTH=$columns
		BASHRUN_WINDOW_HEIGHT=$lines
		;;
	esac
	
        # keep least 1x1
	[[ $BASHRUN_WINDOW_HEIGHT -eq 0 ]] && BASHRUN_WINDOW_HEIGHT=1
	[[ $BASHRUN_WINDOW_WIDTH -eq 0 ]] && BASHRUN_WINDOW_WIDTH=1
	
        # resize
	echo -ne "\e[8;${BASHRUN_WINDOW_HEIGHT};${BASHRUN_WINDOW_WIDTH}t";     

	COLUMNS=$BASHRUN_WINDOW_WIDTH
	LINES=$BASHRUN_WINDOW_HEIGHT
    fi
    return 0
}
 
function bashrun.window.map {

    bashrun.window? || return 1
    bashrun.window.update

    if ! bashrun.window.mapped?; then

	xdotool windowmap $BASHRUN_WINDOW_ID
	bashrun.window.restore_position

	xdotool set_desktop_for_window $BASHRUN_WINDOW_ID $(xdotool get_desktop)
	xdotool windowactivate $BASHRUN_WINDOW_ID
	xdotool windowfocus $BASHRUN_WINDOW_ID	
	xdotool key --clearmodifiers ctrl+x
	xdotool type --clearmodifiers 01

	if [[ BASHRUN_WINDOW_ANIMATE -eq 1 ]]; then
	    bashrun.window.expand
	fi
	BASHRUN_WINDOW_MAPPED=1
	return 0
    fi
    return 1
}

function bashrun.window.unmap {
    bashrun.window? || return 1
    bashrun.window.update

    if bashrun.window.mapped?; then
	bashrun.window.save_position

	if [[ BASHRUN_WINDOW_ANIMATE -eq 1 ]]; then
	    bashrun.window.collapse
	fi
	xdotool windowunmap $BASHRUN_WINDOW_ID
	BASHRUN_WINDOW_MAPPED=0
	return 0
    fi
    return 1
}

function bashrun.window.toggle {
    bashrun.window? || return 1
    bashrun.window.update

    if [[ BASHRUN_WINDOW_MAPPED -eq 0 ]]; then	
	bashrun.window.map
    else
	bashrun.window.unmap
    fi
    return 0
}

function bashrun.window.collapse {

    local delay=${1:-0.001}

    local i=0
    for (( i=$BASHRUN_WINDOW_HEIGHT; i>1; i-- )); do
	(( BASHRUN_WINDOW_HEIGHT-=1 ))
	bashrun.window.size --hint $BASHRUN_WINDOW_WIDTH $BASHRUN_WINDOW_HEIGHT
	sleep $delay
    done
}

function bashrun.window.expand {

    local max_height=${1:-24}
    local delay=${2:-0.001}

    local i=0
    for (( i=1; i<=max_height-1; i++ )); do
	(( BASHRUN_WINDOW_HEIGHT+=1 ))
	bashrun.window.size --hint $BASHRUN_WINDOW_WIDTH $BASHRUN_WINDOW_HEIGHT
	sleep $delay
    done
}

function bashrun.window.save_position {
    echo "$(bashrun.window.pos)" > $BASHRUN_WINDOW_POSFILE
}

function bashrun.window.restore_position {
    if [ -f $BASHRUN_WINDOW_POSFILE ]; then
	bashrun.window.pos "$(cat $BASHRUN_WINDOW_POSFILE)"
    fi
}
