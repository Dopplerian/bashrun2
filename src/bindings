# -*- shell-script -*-

################################################################################

class "internal" "action keymap char readline"
class "binding" "keyseq keymap action is_bound readline"  
class "keyname" "keyseq name"                             

bind '"\C-x00": accept-line'

BASHRUN_BINDINGS_NEXT_CHAR=20                     # next char to bind
BASHRUN_BINDINGS_BLACKLIST=" 34 39 127 "                         
BASHRUN_KEYMAP='emacs' # FIXME: init with initial editing mode

################################################################################

function binding.bound? {
    [[ "$(binding.get_is_bound)" == '1' ]] && return 0
    return 1
}

function binding.code {
    
    local indent="${1:-0}"

    local keyseq=$(binding.get_keyseq)
    local keymap=$(binding.get_keymap)
    local action=$(binding.get_action)

    local args="'$keyseq'"
    [[ "$keymap" != 'emacs' ]] && args="$args '$keymap'"
    
    if [[ indent -eq 1 ]]; then
	echo -n "  "
    fi
    echo "--bind $args"
}

function_clone "bindings.dump" "_bindings.dump"

function bindings.dump {

    _bindings.dump

    local file=$_OBJECTS_DATA_HOME/bindings.dump

    echo "BASHRUN_BINDINGS_NEXT_CHAR=$BASHRUN_BINDINGS_NEXT_CHAR" >> $file

    local saved=$(binding.get_keyseq)

    bindings.seek_start
    while bindings.next?; do
	if binding.bound?; then
	    echo "bind $(binding.get_readline)" >> $file
	fi
	bindings.next
    done
    bindings.seek $saved
}

function_clone "internals.dump" "_internals.dump"

function internals.dump {

    _internals.dump

    local file=$_OBJECTS_DATA_HOME/internals.dump
    local saved=$(internal.get_action)

    internals.seek_start
    while internals.next?; do
	echo "bind $(internal.get_readline)" >> $file
	internals.next
    done    
    internals.seek $saved
}


################################################################################
