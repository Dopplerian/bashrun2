# -*- shell-script -*-

################################################################################

§class "§internal" "action keymap char readline"
§class "§binding" "keyseq keymap action is_bound:b readline"  
§class "§keyname" "keyseq name"                             

bind '"\C-x00": accept-line'

bashrun_bindings_next_char=20 
bashrun_bindings_blacklist=" 34 39 127 "                         

bashrun_keymap='emacs' # will be initialized in engine.init

§function.clone "§bindings.dump" "§_bindings.dump"
§function.clone "§internals.dump" "§_internals.dump"
§function.clone "§keynames.dump" "§_keynames.dump"

################################################################################

function §binding.bound? {
    [[ "$(§binding.get_is_bound)" == '1' ]] && return 0
    return 1
}

function §binding.code {
    
    local indent="${1:-0}"

    local keyseq=$(§binding.get_keyseq)
    local keymap=$(§binding.get_keymap)
    local action=$(§binding.get_action)

    local args="'$keyseq'"
    [[ "$keymap" != 'emacs' ]] && args="$args '$keymap'"
    
    if [[ indent -eq 1 ]]; then
	echo -n "  "
    fi
    echo "--bind $args"
}

function §emacs-mode.dump () {
    §bindings.dump "$@"
}

function §vi-mode.dump () {
    §bindings.dump "$@"
}

function set {
    builtin set "$@"
    if [[ "$1" == "-o" && "$2" =~ (emacs|vi) ]]; then
	local mode="${BASH_REMATCH[1]}-mode"
	local feedback=$BASHRUN_FEEDBACK
	BASHRUN_FEEDBACK=0

	§bindings.clear
	§internals.clear
	§keynames.clear
	§configs.clear

	§configs.restore_core "$mode" &>/dev/null
	§configs.collect_user_configs "$mode"

	§configs.seek "$mode" && §config.restore 

	BASHRUN_FEEDBACK=$feedback
    fi
}

function §bindings.dump {

    local file=$_OBJECTS_DATA_HOME/${1:-§bindings.dump}

    §_bindings.dump "${1:-§bindings.dump}"

    echo "bashrun_bindings_next_char=$bashrun_bindings_next_char" >> $file

    §internals.dump "${1:-§bindings.dump}" append
    §keynames.dump "${1:-§bindings.dump}" append

    local saved=$(§binding.get_keyseq)

    §bindings.seek_start
    while §bindings.next?; do
	if §binding.bound?; then
	    echo "bind $(§binding.get_readline)" >> $file
	fi
	§bindings.next
    done
    §bindings.seek $saved
}

function §internals.dump {

    local file="$_OBJECTS_DATA_HOME/${1:-§internals.dump}"

    §_internals.dump "${1:-§internals.dump}" append

    local saved=$(§internal.get_action)

    §internals.seek_start
    while §internals.next?; do
	echo "bind $(§internal.get_readline)" >> $file
	§internals.next
    done    
    §internals.seek $saved
}

function §keynames.dump {

    §_keynames.dump "${1:-§keynames.dump}" append

}

################################################################################
