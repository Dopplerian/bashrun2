### bashrun 1.0.0rc1 configuration ### -*- shell-script -*-
#
# This is the system-wide configuration file for bashrun.
#
# User configuration files go into ~/.config/bashrun, or
# $XDG_CONFIG_HOME/bashrun if $XDG_CONFIG_HOME has been modified.
#
# Changes to this file require a reload of bashrun (Alt-r).
#
# Please see bashrun(1) for all the details on configuration.

+plugins terminal
# The "+plugins" directive can be used to load plugins. The plugin
# "terminal" is distributed with bashrun and allow it to be used in a
# regular terminal, e.g. use 'bashrun --mode terminal'.
# 
# See /etc/xdg/bashrun/plugins/terminal.rc. Copy this file to
# ~/.config/bashrun/plugins/ if you want to adjust it.

+configure-modes () {

    +mode launcher
      # This is the default "launcher" mode that provides a terminal
      # in the fashion of a run dialog.

      --terminal '__TERMINAL__'
      #
      # This setting replaces the former XTERM, XTERM_OPTIONS, FGCOLOR
      # and BGCOLOR settings.

      --geometry '40x1' '40x8'
      # Set the geometry or geometries to use for the terminal
      # window. If more than one geometry is used, the cycle-size
      # action (Ctrl-l) will allow you to cycle through these
      # geometries.
      #
      # This replaces the former (SMALL|LARGE)_(COLUMNS|LINES)
      # settings.

      --completion 'menu-complete complete 8'
      # Set the readline completion function to use with tab. The
      # first word of this string specifies the completion to use by
      # default. The second word, if given, specifies an alternative
      # completion type to use when the size of the terminal is
      # greater or equal to the number of lines given in the third
      # word.
      #
      # This replaces the former COMPLETION_TYPE,
      # ALTERNATIVE_COMPLETION_TYPE and COMPLETION_THRESHOLD settings.

      --unmap on
      # Whether to unmap the window after running a command. Setting
      # this value to "off" is equivalent to using KEEP_OPEN=yes in
      # previous versions.

      --feedback on
      # Whether to show feedback in the form of a progress bar during
      # startup.

      # --onmap 'transset-df -a 0.75'       
      # A command to run after the window has been mapped and
      # focused. 
      #
      # This setting replaces the former POST_MAP_COMMAND.

      --logfile '/dev/null'
      # Set the logfile to redirect command output to. This replaces
      # the former LOGFILE setting.

      function +mode-launcher-init {	
          # This fuction, if defined, will be called for the default
	  # mode "launcher" during startup. Here you can configure
	  # anything that is specific to this mode only. See
	  # bashrun(1) for alternatives.

	  HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/bashrun/history"	
	  PS1='>'

	  stty -ixon       # disable flow control, allows to bind C-Q
	  set -o ignoreeof # prevent C-d on an empty line from exiting	  
      }

    # For more options and a detailed description of modes, see
    # bashrun(1)
}

+configure-terminals () {

    # Configure terminals to launch commands in. In the string given
    # by --command, the following strings have special meaning:
    #
    #    %* : replaced with the actual command to run. 
    #    %@ : replaced with the actual command to run, quoted to
    #         appear as a single argument.
    #      
    #         Consequtive @'s add another level of quoting, e.g. %@@
    #         quotes two times, %@@@ quotes three times, and so on.
    #
    #    %g : replaced with the string given by --geometry.
    #    %f : replaced with the string given by --font.
    #
    # If neither %* or %@ is given, the command is appended to the end
    # of the string without further quoting.
    
    # The following two terminals, called "default" and
    # "notify", are always defined:

    +terminal default 
      --command '__EXEC_TERMINAL__'

    # The default terminal is used to execute commands if no other
    # terminal has been explicitly requested by an action.
    #
    # Some examples on how to run shell commands in common terminals:
    #
    # +terminal default --command '__EXEC_TERMINAL__'
    # +terminal default --command 'rxvt -e bash -c %@'
    # +terminal default --command 'xterm -e bash -c %@'
    # +terminal default --command 'urxvt -e bash -c %@'
    # +terminal default --command 'mrxvt -e bash -c %@'
    # +terminal default --command 'aterm -e bash -c %@'
    # +terminal default --command 'Eterm -e bash -c %@'
    # +terminal default --command 'roxterm -e bash -c %@'
    # +terminal default --command 'konsole -e bash -c %@'
    # +terminal default --command 'Terminal -x bash -c %@'
    # +terminal default --command 'gnome-terminal -e bash\ -c\ %@@'
    # +terminal default --command 'terminator -x bash -c %@'    

    +terminal notify 
      --command '__EXEC_TERMINAL__'
      --geometry '40x4+0+0'
      # ^ A small terminal for notifications, used by the default actions
      # "term-notify" and "su-term-notify".
      
    +terminal small
      --command 'urxvt -g %g -fn %f -e bash -c %@'
      --geometry '160x48'
      --font 'xft:fixed'
      --match 'htop' '/^ls/'

      # An example of using urxvt with a small font. 
}

+configure-rules () {

    # Rules can be used to associate actions with specific commands or
    # command lines that are run using the generic "run" action. The
    # --match option adds one or more command specifications to a
    # rule, separated by whitespace.
    #
    # A command specification can be either the executable name of a
    # program or a regular expression.
    #
    # Regular expressions are denoted by enclosing them in '/'. Note
    # that you don't have to quote literal slashes inside the regular
    # expression, since the enclosing slashes are used solely to
    # denote a regular expression to bashrun.
    #
    # This is the equivalent of the RULES array used in previous
    # versions.
    #
    # Some examples:

    +rule term-page
      --match 'dict'
      # the the term-page action is used to show the output of the
      # "dict" program, paged in the default terminal. If you want to
      # use a different dict client, set the DICT environment variable
      # to the executable name of the client, e.g. DICT=kdict. Doing
      # this is similar to using the DICT_CLIENT setting in previous
      # versions.
     
      --match '/^ls/'
      # the term-page action is used to show the output of any
      # commandline beginning with "ls", paged in a terminal.

    +rule su-term-notify
      --match '/^/etc/(rc|init)\.d/'
      # the su-term-notify action is used here to run any commandline
      # beginning with '/etc/rc.d' or '/etc/init.d' as root and show
      # it's output in the 'notify' terminal, closing the terminal
      # after two seconds. Note that in this case, the su-term-notify
      # action chooses to use the 'notify' terminal by default.
}

+configure-handlers () {

    # Handlers provide a way to handle non-executable commandlines in
    # a special way and thus extend bashrun's functionality. If the
    # commandline entered into bashrun is not executable (i.e. it's
    # not an exported function, an alias or an executable) then an
    # attempt is made to successively match the commandline against
    # each of the handlers defined here.
    #
    # If the regular expression given in --match matches the
    # commandline, then the file test pattern given in --test is
    # applied, if any. If no test was given or if the supplied test
    # succeeds, then either the value of --command will be used as the
    # command to execute, with the commandline itself passed as the
    # argument, or, if the regexp contains subexpressions within
    # parenthesis, an attempt will be made to substitute the occurence
    # of %[1-9] in the value of --command with the contents of the
    # corresponding subexpression match. In this case, the modified
    # handler string is used as the commandline without adding further
    # arguments.
    #
    # The --action option may be used to delegate the resulting string
    # to a specific action for further processing instead of simply
    # trying to execute it.
    #
    # In addition, handlers provide a simple interface to programmable
    # completion. The command word to complete can be supplied via the
    # --complete option, and a function called
    # +handler-<handler>-complete can be defined to generate a list of
    # strings to complete against.

    +handler info
      --match '(.+)\?\?'
      --command '%1'
      --action show-info
      # E.g. if you run "bash??" then the string "bash" is used as the
      # commandline to be used with the show-info action, which pages
      # "info bash" in the default terminal, unless the "info" program
      # has been associated with a specific terminal object.
      
    +handler manual
      --match '(.+)\?'
      --command '%1'
      --action show-manual
      # Similar to the above, but shows manual pages instead. Note
      # that the order of handlers is important here: if this handler
      # was defined before the info handler, then the info handler
      # would never be reached.

    +handler browse
      --match 'browse (.*)'
      --command '%1'
      --action 'browse'
      --complete 'browse'

      +handler-browse-complete () { +bookmarks --list; }
      # the --complete option for this handler installs a function
      # named "browse", for which the +handler-complete-browse
      # function is used to generate the list of possible matches from
      # bashrun's bookmarks. Thus you can just type "browse " and hit
      # tab to get at your bookmarks. If you hit return, this handler
      # will delegate the bookmark string to the default "browse" action,
      # which open the bookmark string using $BROWSER.

    +handler http
      --match '^(www|https?)'   
      --action browse
      # A simple url handler, for lines beginning with http, https or
      # www.

    +handler tlds
      --match '\.(org|net|com)$'
      --action browse
      # Another simple url handler that matches the end of the
      # commandline, looking for a common toplevel domain.

    +handler google
      --match '^gg:(.+)'
      --command  'www.google.com/search?q=%1'
      --action browse
      # An example of a Konqueror-style url shortcut: if you type
      # "gg:foo", then the %1 in "www.google.com/search?q=%1" will be
      # replaced with "foo", and the resulting url will be passed to the
      # browse action, which finally launches "$BROWSER <url>"

    +handler google-lucky
      --match '^ggl:(.+)'
      --command  'www.google.com/search?q=%1&btnI=I\%27m+Feeling+Lucky'
      --action browse
      # The same as above, but uses google's "Feeling Lucky" function.

    +handler freshmeat-search
      --match '^fm:(.+)'  
      --command 'freshmeat.net/search/?q=%1&section=projects'
      --action browse

    +handler sourceforge-project
      --match '^sf:(.+)'  
      --command 'sourceforge.net/projects/%1/'
      --action browse
      
    +handler sourceforge-website
      --match '^sw:(.+)' 
      --command '%1.sourceforge.net/'
      --action browse

    +handler aur-search
      --match 'aur:(.+)'
      --command 'aur.archlinux.org/packages.php?K=%1&do_Search=Go'
      --action browse

    +handler ftp
      --match '^ftp://(.+)' 
      --command 'ncftp'
      --action term-run 

    +handler gimp
      --match '\.jpe?g$'
      --test 'f!x'
      --command 'gimp'
      # This handler implements a file association by matching any
      # command line ending in .jpg or .jpeg. It then tests whether
      # the command line is a path to a file that is not executable by
      # applying the file test pattern "f!x".  If the test succeeds,
      # the file is opened in gimp.
      #
      # For a more universal solution to file associations, see the
      # "file" fallback handler below.

    +handler video
      --match '\.(avi|mpe?g|flv|mp4|wmv|mov)$'
      --test 'f'
      --command 'mplayer -fs'
      # Another file association to open video files in fullscreen
      # mplayer.

    +handler command-help
      --match '^\?(.+)'  
      --command '%1 --help'
      --action term-page
      # E.g. ?bash pages "bash --help" in a terminal

    # The remaining handlers are fallback handlers, which means they
    # are guaranteed to be at the end of the handler list, and will
    # match any non-executable commandline not yet handled by a
    # previous handler. The first two of these use a file test
    # operator given in --test to check whether the commandline is a
    # path to a directory or a file, respectively.
    
    +handler directory
      --fallback true
      --test 'd'
      --command "kfmclient openProfile filemanagement %1"
      # Open directories in konqueror, using the file management
      # profile.

    +handler file
      --fallback true
      --test 'f!x'
      --command "xdg-open %1"
      # handle files universally with xdg-open, see xdg-open(1)

    # +handler google-fallback
    #  --fallback 1
    #  --command  "www.google.com/search?q=%1"
    #  --action browse

    # The "directory" handler is the equivalent of the former
    # DIRHANDLER setting. The "google-fallback" handler, if present,
    # is equivalent to using GOOGLE_FALLBACK=yes in previous versions.
}

+configure-bookmarks () {

    # Add bookmarks. For each bookmark, a function by the same name is
    # defined that runs the browse action for the bookmark. This means
    # you can complete bookmarks like regular commands.
    # Alternatively use the completion of the "browse" handler
    # defined above.

    +bookmark bashrun.sourceforge.net
    +bookmark archlinux.org
}

+configure-actions () {

    # You can define and use your own actions here, as well as
    # redefine the properties and/or behavior of the buitin default
    # actions. For details on how to write custom actions or change
    # default actions, see bashrun(1).
    #
    # Some examples:
      
    +action run-as
      --description 'Run command as user (prompts for username)'
      --depends 'su'

      function +action-run-as {
	  +action-run
	  user --prompt
      }

    +action kill-to-xclip
      --description 'Kill whole line and copy to clipboard' 
      --depends 'xclip'

      function +action-kill-to-xclip { 
	  command "printf '%s' \"$(line)\" | xclip"
	  return 0
      }

    +action yank-from-xclip
      --description 'Yank clipboard contents' 
      --input no
      --depends 'xclip'

       function +action-yank-from-xclip {
 
	   local text="$(xclip -o)"
	   declare -i size=${#text}
	   
	   local pre="${READLINE_LINE:0:$READLINE_POINT}"
	   local post="${READLINE_LINE:$READLINE_POINT}"
	   
	   READLINE_LINE="$pre$text$post"
	   
	   (( READLINE_POINT += size ))
	   return 2
       }
}

+configure-emacs-mode () {

    # Bind actions to key sequences for readline's emacs-mode:
    # 
    # +keymap <keymap> 
    #
    #   The +keymap directive can be used to change the target keymap
    #   for subsequent +bind directives.
    #
    # +bind <action> <keyseq> [<keyname>]
    #
    #   Bind an <action> to a <keyseq>, optionally supplying a human
    #   readable <keyname>.
    #
    #   See readine(1) on how to specify key sequences. In short,
    #   '\ex' means Alt-x and '\C-x' means Control-x.

    +keymap emacs

    +bind pass '\ew'
    +bind abort  '\C-g'
    +bind reload  '\er'
    +bind quit '\C-q'

    +bind run  '\C-m'
    +bind run  '\C-j'

    +bind term-run  '\e\C-m'
    +bind term-page '\e+'
    +bind term-hold '\eh'

    +bind su-run       '\esu'
    +bind su-term-run  '\est'
    +bind su-term-page '\es+'
    +bind su-term-hold '\esh'

    +bind show-manual  '\e?'
    +bind show-info    '\e\C-?'
    +bind show-help    '\e\C-x?'

    +bind browse         '\e\C-b'
    +bind google-search  '\e\C-g'
    +bind dict-lookup    '\e\C-d'

    +bind copy-to-clipboard '\ex'
    +bind filter-clipboard  '\ea'

    +bind bashrun-bindings '\e[11~' 'F1'
    +bind bashrun-bindings '\eOP'   'F1'

    +bind bashrun-manual   '\e[12~' 'F2'
    +bind bashrun-manual   '\eOQ'   'F2'
    +bind debug            '\e[24~' 'F12'

    +bind cycle-size   '\C-l'
    +bind resize-up    '\e[1;5A' 'C-up'
    +bind resize-down  '\e[1;5B' 'C-down'
    +bind resize-left  '\e[1;5D' 'C-left'
    +bind resize-right '\e[1;5C' 'C-right'
}

+configure-vi-mode () { 

    +keymap vi-command

    +bind pass '\ew'
    +bind abort  '\C-g'
    +bind reload  '\er'
    +bind quit '\C-q'

    +bind run  '\C-m'
    +bind run  '\C-j'

    +bind term-run  '\e\C-m'
    +bind term-page '\e+'
    +bind term-hold '\eh'

    +bind su-run       '\esu'
    +bind su-term-run  '\est'
    +bind su-term-page '\es+'
    +bind su-term-hold '\esh'

    +bind show-manual  '\e?'
    +bind show-info    '\ei'
    +bind show-help    '\eh'

    +bind browse         '\eb'
    +bind google-search  '\eg'
    +bind dict-lookup    '\ed'

    +bind copy-to-clipboard '\ec'
    +bind filter-clipboard  '\ea'

    +bind bashrun-bindings '\e[11~' 'F1'
    +bind bashrun-bindings '\eOP'   'F1'

    +bind bashrun-manual   '\e[12~' 'F2'
    +bind bashrun-manual   '\eOQ'   'F2'
    +bind debug            '\e[24~' 'F12'

    +bind cycle-size   '\C-l'
    +bind resize-up    '\e[1;5A' 'C-up'
    +bind resize-down  '\e[1;5B' 'C-down'
    +bind resize-left  '\e[1;5D' 'C-left'
    +bind resize-right '\e[1;5C' 'C-right'

    +keymap vi-insert

    +bind pass '\ew'
    +bind abort  '\C-g'
    +bind reload  '\er'
    +bind quit '\C-q'

    +bind run  '\C-m'
    +bind run  '\C-j'

    +bind bashrun-bindings '\e[11~' 'F1'
    +bind bashrun-bindings '\eOP'   'F1'

    +bind bashrun-manual   '\e[12~' 'F2'
    +bind bashrun-manual   '\eOQ'   'F2'
    +bind debug            '\e[24~' 'F12'

    +bind cycle-size   '\C-l'
    +bind resize-up    '\e[1;5A' 'C-up'
    +bind resize-down  '\e[1;5B' 'C-down'
    +bind resize-left  '\e[1;5D' 'C-left'
    +bind resize-right '\e[1;5C' 'C-right'
}
